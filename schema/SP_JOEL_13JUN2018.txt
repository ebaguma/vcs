DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `ADMIN_LOG_OFF_USER`(OFF_USERNAME_ VARCHAR(100), USERNAME_ VARCHAR(100))
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_SYS_SESSION SET LOGOUT_DATE = CURRENT_TIMESTAMP(),
IS_DELETED = 'true', UPDATED_DATE = CURRENT_TIMESTAMP(), 
UPDATED_BY = (SELECT ID FROM MST_SYS_USER WHERE USER_NAME = USERNAME_)
WHERE USER_ID = (SELECT ID FROM MST_SYS_USER WHERE USER_NAME = OFF_USERNAME_)
AND LOGOUT_DATE IS NULL;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_DOC_PHOTO`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_DOC_UPLOAD WHERE  ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_ID_PHOTO`(PAP_ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_DOC_UPLOAD WHERE PAP_ID = PAP_ID_ and DOC_TYPE = 'ID Photo';

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PAP_ADDR`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_BIO_PAP_ADDR 
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PAP_FAMILY_MBR`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_BIO_PAP_FAMILY
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PAP_INFO`(HHID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_BIO_PAP_INFO 
WHERE HHID = HHID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PROJECT_CLIENT`(ID_ INT(11))
BEGIN
DECLARE ROWS_ INT;

DELETE FROM TRN_PROJ_CLIENT
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PROJECT_CLIENT_STAFF`(ID_ INT(11))
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_PROJ_CLIENT_STAFF
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PROJ_BUDGET`(ID_ INT)
BEGIN
DECLARE ROWS_ INT;

DELETE FROM TRN_PROJ_BUDGET WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PROJ_DISPUTE`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_PROJ_DISPUTE WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PROJ_EXPENSE`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_PROJ_EXPENSE WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PROJ_SECT`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;


DELETE FROM TRN_PROJ_SECTIONS
WHERE ID = ID_;


SELECT ROW_COUNT() INTO ROWS_;


SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_PROJ_STAFF`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_PROJ_STAFF WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_SYS_SESSION`(USERID_ INT)
BEGIN

DECLARE LOGOUT_STATUS VARCHAR(10);
DECLARE ROWS_ INT(10);

UPDATE TRN_SYS_SESSION
SET LOGOUT_DATE = CURRENT_TIMESTAMP(), IS_DELETED = 'true', UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE USER_ID = USERID_ AND LOGOUT_DATE IS NULL;

SELECT ROW_COUNT() INTO ROWS_;

IF ROWS_ > 0 THEN
SET LOGOUT_STATUS = "TRUE";
ELSE
SET LOGOUT_STATUS = "FALSE";
END IF;

SELECT LOGOUT_STATUS;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_SYS_SESSION_ADMIN`(USERID_ INT)
BEGIN

DECLARE LOGOUT_STATUS VARCHAR(10);
DECLARE ROWS_ INT(10);

UPDATE TRN_SYS_SESSION
SET LOGOUT_DATE = CURRENT_TIMESTAMP(), IS_DELETED = 'true', UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE USER_ID = USERID_ AND LOGOUT_DATE IS NULL;

SELECT ROW_COUNT() INTO ROWS_;

IF ROWS_ > 0 THEN
SET LOGOUT_STATUS = "YES";
ELSE
SET LOGOUT_STATUS = "NO";
END IF;

SELECT LOGOUT_STATUS;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_CROP`(ID_ INT, PAP_ID INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_CROP WHERE ID = ID_ AND PAP_ID = PAP_ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_DISPUTE`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_DISPUTE WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_FIX`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_FIX WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_LAND`(PAP_ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_LAND WHERE PAP_ID = PAP_ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_LAND_GIS`(ID_ INT, PAP_ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_LAND_GIS WHERE ID = ID_ AND PAP_ID = PAP_ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_LAND_NBR`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_LAND_NBR WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_STR`()
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_STR WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_DEL_VAL_TOTALS`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

DELETE FROM TRN_VAL_TOTALS WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_COUNTY`(DIST_ID_ INT)
BEGIN

SELECT ID,COUNTY,DIST_ID,OTHER_DTL,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM MST_BIO_COUNTY WHERE IS_DELETED = 'false' AND DIST_ID = DIST_ID_
ORDER BY COUNTY;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_DISTRICT`()
BEGIN


SELECT ID,DISTRICT,OTHER_DTL,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM MST_BIO_DISTRICT WHERE IS_DELETED = 'false'
ORDER BY DISTRICT;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_DOC_PHOTO`(PAP_ID_ INT)
BEGIN


SELECT ID,PAP_ID,PROJ_ID,DOC_TYPE,DOC_TAG,FILE_NAME,FILE_PATH
FROM TRN_DOC_UPLOAD WHERE DOC_TYPE = "ID Photo"
AND IS_DELETED = 'false' 
AND PAP_ID = PAP_ID_;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_DOC_PHOTO_ALL`(PAP_ID_ INT, PROJ_ID_ INT, DOC_TYPE_ VARCHAR(100), DOC_TAG_ VARCHAR(100))
BEGIN

IF PAP_ID_ IS NULL THEN

SELECT ID,PAP_ID,PROJ_ID,DOC_TYPE,FILE_NAME,FILE_PATH
FROM TRN_DOC_UPLOAD WHERE DOC_TYPE = DOC_TYPE_
AND IS_DELETED = 'false' 
AND PROJ_ID = PROJ_ID_
AND DOC_TAG = DOC_TAG_;

ELSE

SELECT ID,PAP_ID,PROJ_ID,DOC_TYPE,FILE_NAME,FILE_PATH
FROM TRN_DOC_UPLOAD WHERE DOC_TYPE = DOC_TYPE_
AND IS_DELETED = 'false' 
AND PAP_ID = PAP_ID_
AND DOC_TAG = DOC_TAG_;

END IF;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_DOC_PHOTO_LIMIT`(PAP_ID_ INT, PROJ_ID_ INT, DOC_TYPE_ VARCHAR(100), DOC_TAG_ VARCHAR(100), OFFSET_ INT, LIMIT_ INT)
BEGIN

IF PAP_ID_ = 1 THEN

SELECT ID,PAP_ID,PROJ_ID,DOC_TYPE,FILE_NAME,FILE_PATH
FROM TRN_DOC_UPLOAD WHERE DOC_TYPE = DOC_TYPE_ 
AND IS_DELETED = 'false' 
AND PROJ_ID = PROJ_ID_
AND DOC_TAG = DOC_TAG_
LIMIT OFFSET_,LIMIT_;

ELSE

SELECT ID,PAP_ID,PROJ_ID,DOC_TYPE,FILE_NAME,FILE_PATH
FROM TRN_DOC_UPLOAD WHERE DOC_TYPE = DOC_TYPE_
AND IS_DELETED = 'false' 
AND PAP_ID = PAP_ID_
AND DOC_TAG = DOC_TAG_
LIMIT OFFSET_,LIMIT_;

END IF;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_ADDR`(ID_ INT)
BEGIN

SELECT
TRN_BIO_PAP_ADDR.ID,
TRN_BIO_PAP_ADDR.PAP_ID,
TRN_BIO_PAP_ADDR.ROAD,
TRN_BIO_PAP_ADDR.IS_RESIDENT,
LOCATION.VILL_ID,
LOCATION.VILLAGE,
LOCATION.SUBCTY_ID,
LOCATION.CTY_ID,
LOCATION.DIST_ID,
LOCATION.DISTRICT
FROM TRN_BIO_PAP_ADDR

INNER JOIN

(SELECT
MST_BIO_VILLAGE.ID AS VILL_ID,
MST_BIO_VILLAGE.VILLAGE,
MST_BIO_SUBCOUNTY.ID AS SUBCTY_ID,
MST_BIO_SUBCOUNTY.SUBCOUNTY,
MST_BIO_COUNTY.ID AS CTY_ID,
MST_BIO_COUNTY.COUNTY,
MST_BIO_DISTRICT.ID AS DIST_ID,
MST_BIO_DISTRICT.DISTRICT
FROM MST_BIO_VILLAGE
INNER JOIN MST_BIO_SUBCOUNTY ON MST_BIO_VILLAGE.SUBCTY_ID = MST_BIO_SUBCOUNTY.ID
INNER JOIN MST_BIO_COUNTY ON MST_BIO_SUBCOUNTY.CTY_ID = MST_BIO_COUNTY.ID
INNER JOIN MST_BIO_DISTRICT ON MST_BIO_COUNTY.DIST_ID = MST_BIO_DISTRICT.ID) LOCATION
ON LOCATION.VILL_ID = TRN_BIO_PAP_ADDR.VILL_ID

WHERE TRN_BIO_PAP_ADDR.IS_DELETED = 'false'
AND TRN_BIO_PAP_ADDR.ID = ID_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_ADDR_ALL`(PAP_ID_ INT)
BEGIN

SELECT *
FROM TRN_BIO_PAP_ADDR

INNER JOIN

(SELECT
MST_BIO_VILLAGE.ID AS VILL_ID,
MST_BIO_VILLAGE.VILLAGE,
MST_BIO_SUBCOUNTY.ID AS SUBCTY_ID,
MST_BIO_SUBCOUNTY.SUBCOUNTY,
MST_BIO_COUNTY.ID AS CTY_ID,
MST_BIO_COUNTY.COUNTY,
MST_BIO_DISTRICT.ID AS DIST_ID,
MST_BIO_DISTRICT.DISTRICT
FROM MST_BIO_VILLAGE
INNER JOIN MST_BIO_SUBCOUNTY ON MST_BIO_VILLAGE.SUBCTY_ID = MST_BIO_SUBCOUNTY.ID
INNER JOIN MST_BIO_COUNTY ON MST_BIO_SUBCOUNTY.CTY_ID = MST_BIO_COUNTY.ID
INNER JOIN MST_BIO_DISTRICT ON MST_BIO_COUNTY.DIST_ID = MST_BIO_DISTRICT.ID) LOCATION
ON LOCATION.VILL_ID = TRN_BIO_PAP_ADDR.VILL_ID

WHERE TRN_BIO_PAP_ADDR.IS_DELETED = 'false'
AND TRN_BIO_PAP_ADDR.PAP_ID = PAP_ID_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_ADDR_LIMIT`(PAP_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

SELECT
TRN_BIO_PAP_ADDR.ID,
TRN_BIO_PAP_ADDR.PAP_ID,
TRN_BIO_PAP_ADDR.ROAD,
TRN_BIO_PAP_ADDR.IS_RESIDENT,
LOCATION.VILL_ID,
LOCATION.VILLAGE,
LOCATION.SUBCTY_ID,
LOCATION.CTY_ID,
LOCATION.DIST_ID,
LOCATION.DISTRICT
FROM TRN_BIO_PAP_ADDR

INNER JOIN

(SELECT
MST_BIO_VILLAGE.ID AS VILL_ID,
MST_BIO_VILLAGE.VILLAGE,
MST_BIO_SUBCOUNTY.ID AS SUBCTY_ID,
MST_BIO_SUBCOUNTY.SUBCOUNTY,
MST_BIO_COUNTY.ID AS CTY_ID,
MST_BIO_COUNTY.COUNTY,
MST_BIO_DISTRICT.ID AS DIST_ID,
MST_BIO_DISTRICT.DISTRICT
FROM MST_BIO_VILLAGE
INNER JOIN MST_BIO_SUBCOUNTY ON MST_BIO_VILLAGE.SUBCTY_ID = MST_BIO_SUBCOUNTY.ID
INNER JOIN MST_BIO_COUNTY ON MST_BIO_SUBCOUNTY.CTY_ID = MST_BIO_COUNTY.ID
INNER JOIN MST_BIO_DISTRICT ON MST_BIO_COUNTY.DIST_ID = MST_BIO_DISTRICT.ID) LOCATION
ON LOCATION.VILL_ID = TRN_BIO_PAP_ADDR.VILL_ID

WHERE TRN_BIO_PAP_ADDR.IS_DELETED = 'false'
AND TRN_BIO_PAP_ADDR.PAP_ID = PAP_ID_
LIMIT OFFSET_,LIMIT_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_FAMILY_ALL`(PAP_ID_ INT)
BEGIN

SELECT ID,MBR_NAME,PAP_ID,RLTN_ID,DOB,BIRTH_PLACE,SEX,TRIBE_ID,RELGN_ID,
OTHER_DTL,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM TRN_BIO_PAP_FAMILY
WHERE IS_DELETED = 'false'
AND PAP_ID = PAP_ID_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_FAMILY_LIMIT`(PAP_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

SELECT TPF.ID, TPF.MBR_NAME, TPF.PAP_ID, TPF.RLTN_ID, MBR.RELATION, TPF.DOB, 
DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(), TPF.DOB)), "%Y")+0 AS AGE, 
TPF.BIRTH_PLACE, TPF.SEX, TPF.TRIBE_ID, TPF.RELGN_ID,
TPF.OTHER_DTL, TPF.IS_DELETED
FROM TRN_BIO_PAP_FAMILY TPF
INNER JOIN MST_BIO_RELATION MBR ON TPF.RLTN_ID = MBR.ID
WHERE TPF.IS_DELETED = 'false'
AND TPF.PAP_ID = PAP_ID_
LIMIT OFFSET_,LIMIT_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_FAMILY_MBR`(ID_ INT)
BEGIN

SELECT ID, MBR_NAME, PAP_ID, RLTN_ID, 
DATE_FORMAT(DOB, '%d/%c/%Y') AS DOB, 
DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(), DOB)), "%Y")+0 AS AGE, 
BIRTH_PLACE, SEX, TRIBE_ID, RELGN_ID,
OTHER_DTL, IS_DELETED, UPDATED_BY, UPDATED_DATE, CREATED_BY, CREATED_DATE
FROM TRN_BIO_PAP_FAMILY
WHERE IS_DELETED = 'false'
AND ID = ID_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO`(IN `HHID_` INT)
BEGIN

SELECT
TRN_BIO_PAP_INFO.HHID,
TRN_BIO_PAP_INFO.ID_NO,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PLOT_REF,
TRN_BIO_PAP_INFO.REF_NO,
TRN_BIO_PAP_INFO.PAP_STATUS_ID,
TRN_BIO_PAP_INFO.DESIGN,
TRN_BIO_PAP_INFO.PAP_TYPE,
TRN_BIO_PAP_INFO.PROJ_ID,
TRN_BIO_PAP_INFO.INTERVIEWER,
TRN_BIO_PAP_INFO.INTERVIEW_DATE,
TRN_BIO_PAP_INFO.PHOTO
FROM TRN_BIO_PAP_INFO
WHERE HHID = HHID_
AND IS_DELETED = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO_ALL`(PROJ_ID_ INT)
SELECT 
TRN_BIO_PAP_INFO.HHID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PLOT_REF,
TRN_BIO_PAP_INFO.REF_NO,
TRN_BIO_PAP_INFO.PAP_STATUS_ID,
TRN_BIO_PAP_INFO.DESIGN,
TRN_BIO_PAP_INFO.PAP_TYPE,
TRN_BIO_PAP_INFO.PROJ_ID
FROM TRN_BIO_PAP_INFO
WHERE PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false'$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO_AUTO_COMP`(PAP_NAME_ VARCHAR(250))
BEGIN

DECLARE DO_SEARCH_ VARCHAR(100);
SET DO_SEARCH_ = CONCAT('%',LOWER(PAP_NAME_),'%');

SELECT
TRN_BIO_PAP_INFO.HHID,
TRN_BIO_PAP_INFO.PAP_NAME
FROM TRN_BIO_PAP_INFO
WHERE LOWER(PAP_NAME) LIKE DO_SEARCH_
AND IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO_BASIC`(IN `PROJ_ID_` INT, IN `HHID_` INT)
BEGIN

SELECT HHID,ID_NO,PAP_NAME,DATE_FORMAT(DOB, '%d/%c/%Y') AS DOB,SEX,PLOT_REF,REF_NO,IS_RESIDENT,BIRTH_PLACE,IS_MARRIED,TRIBE_ID,
RELGN_ID,OCCUPN_ID,PAP_STATUS_ID,LPAD(PHONE_NO, 10, 0) AS PHONE_NO,LPAD(OTHR_PHONE_NO, 10, 0) AS OTHR_PHONE_NO,EMAIL,DESIGN,PHOTO,PAP_TYPE,PROJ_ID,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE,INTERVIEWER,DATE_FORMAT(INTERVIEW_DATE, '%d/%c/%Y') AS INTERVIEW_DATE
FROM TRN_BIO_PAP_INFO
WHERE PROJ_ID = PROJ_ID_ AND HHID = HHID_
AND IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO_LIMIT`(PROJ_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

SELECT
TRN_BIO_PAP_INFO.HHID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PLOT_REF,
TRN_BIO_PAP_INFO.REF_NO,
TRN_BIO_PAP_INFO.PAP_STATUS_ID,
TRN_BIO_PAP_INFO.DESIGN,
TRN_BIO_PAP_INFO.PAP_TYPE,
TRN_BIO_PAP_INFO.PROJ_ID
FROM TRN_BIO_PAP_INFO
WHERE PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO_SEARCH_ALL`(SEARCH_ VARCHAR(100), PROJ_ID_ INT)
BEGIN

DECLARE DO_SEARCH_ VARCHAR(100);

SET DO_SEARCH_ = CONCAT('%',LOWER(SEARCH_),'%');


SELECT
TRN_BIO_PAP_INFO.HHID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PLOT_REF,
TRN_BIO_PAP_INFO.REF_NO,
TRN_BIO_PAP_INFO.PAP_STATUS_ID,
TRN_BIO_PAP_INFO.DESIGN,
TRN_BIO_PAP_INFO.PAP_TYPE,
TRN_BIO_PAP_INFO.PROJ_ID
FROM TRN_BIO_PAP_INFO
WHERE (HHID LIKE DO_SEARCH_
OR LOWER(PAP_NAME) LIKE DO_SEARCH_
OR LOWER(PLOT_REF) LIKE DO_SEARCH_
OR LOWER(DESIGN) LIKE DO_SEARCH_
OR LOWER(PAP_TYPE) LIKE DO_SEARCH_)
AND PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false';




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO_SEARCH_DISP`(SEARCH_ VARCHAR(100), PROJ_ID_ INT)
BEGIN

DECLARE DO_SEARCH_ VARCHAR(100);

SET DO_SEARCH_ = CONCAT('%',LOWER(SEARCH_),'%');


SELECT
TRN_BIO_PAP_INFO.HHID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PLOT_REF,
TRN_BIO_PAP_INFO.REF_NO,
TRN_BIO_PAP_INFO.PAP_STATUS_ID,
TRN_BIO_PAP_INFO.DESIGN,
TRN_BIO_PAP_INFO.PAP_TYPE,
TRN_BIO_PAP_INFO.PROJ_ID
FROM TRN_BIO_PAP_INFO
WHERE LOWER(PAP_NAME) LIKE DO_SEARCH_
AND PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false';




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_INFO_SEARCH_LIMIT`(SEARCH_ VARCHAR(100), PROJ_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

DECLARE DO_SEARCH_ VARCHAR(100);

SET DO_SEARCH_ = CONCAT('%',LOWER(SEARCH_),'%');


SELECT
TRN_BIO_PAP_INFO.HHID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PLOT_REF,
TRN_BIO_PAP_INFO.REF_NO,
TRN_BIO_PAP_INFO.PAP_STATUS_ID,
TRN_BIO_PAP_INFO.DESIGN,
TRN_BIO_PAP_INFO.PAP_TYPE,
TRN_BIO_PAP_INFO.PROJ_ID
FROM TRN_BIO_PAP_INFO
WHERE (HHID LIKE DO_SEARCH_
OR LOWER(PAP_NAME) LIKE DO_SEARCH_
OR LOWER(PLOT_REF) LIKE DO_SEARCH_
OR LOWER(DESIGN) LIKE DO_SEARCH_
OR LOWER(PAP_TYPE) LIKE DO_SEARCH_)
AND PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_OCCUPN_DROP`()
BEGIN

SELECT ID,OCCUPN_NAME,OTHER_DTL,IS_DELETED
FROM MST_BIO_OCCUPATION WHERE IS_DELETED = 'false'
ORDER BY OCCUPN_NAME;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_RELGN_DROP`()
BEGIN

SELECT RELIGION,OTHER_DTL,ID
FROM MST_BIO_RELIGION
WHERE IS_DELETED = 'false'
ORDER BY RELIGION;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PAP_TRIBE_DROP`()
BEGIN

SELECT ID,TRIBE
FROM MST_BIO_TRIBE
WHERE IS_DELETED = 'false'
ORDER BY TRIBE;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECTS_ALL`()
BEGIN

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECTS_ALL_SEARCH`(PROJECTNAME_ VARCHAR(100),  PROJECTCODE_ VARCHAR(10))
BEGIN

DECLARE PROJ_ VARCHAR(100);
DECLARE PROJ_COD_ VARCHAR(10);

IF PROJECTCODE_ = '' THEN

SET PROJ_ = CONCAT('%',LOWER(PROJECTNAME_),'%');

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.PROJ_NAME) LIKE PROJ_
AND LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false'
ORDER BY TRN_PROJ_DETAILS.PROJ_NAME;

ELSE IF PROJECTNAME_ = '' THEN

SET PROJ_COD_ = CONCAT('%',LOWER(PROJECTCODE_ ),'%');

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.PROJ_CODE) LIKE PROJ_COD_
AND LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false'
ORDER BY TRN_PROJ_DETAILS.PROJ_NAME;

ELSE 

SET PROJ_COD_ = CONCAT('%',LOWER(PROJECTCODE_ ),'%');

SET PROJ_ = CONCAT('%',LOWER(PROJECTNAME_),'%');

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.PROJ_CODE) LIKE PROJ_COD_ OR LOWER(TRN_PROJ_DETAILS.PROJ_NAME) LIKE PROJ_
AND LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false'
ORDER BY TRN_PROJ_DETAILS.PROJ_NAME;

END IF;

END IF;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECTS_LIMIT`(LIMIT_ INT, OFFSET_ INT)
BEGIN

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,
DATE_FORMAT(TRN_PROJ_DETAILS.START_DATE,'%d %b, %Y') AS START_DATE,
DATE_FORMAT(TRN_PROJ_DETAILS.END_DATE,'%d %b, %Y') AS END_DATE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false'
ORDER BY TRN_PROJ_DETAILS.PROJ_NAME
LIMIT OFFSET_,LIMIT_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECTS_LIMIT_SEARCH`(LIMIT_ INT, OFFSET_ INT,PROJECTNAME_ VARCHAR(100),  PROJECTCODE_ VARCHAR(10))
BEGIN

DECLARE PROJ_ VARCHAR(100);
DECLARE PROJ_COD_ VARCHAR(10);

IF PROJECTCODE_ = '' THEN

SET PROJ_ = CONCAT('%',LOWER(PROJECTNAME_),'%');

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,
DATE_FORMAT(TRN_PROJ_DETAILS.START_DATE,'%d %b, %Y') AS START_DATE,
DATE_FORMAT(TRN_PROJ_DETAILS.END_DATE,'%d %b, %Y') AS END_DATE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.PROJ_NAME) LIKE PROJ_
AND LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false'
ORDER BY TRN_PROJ_DETAILS.PROJ_NAME
LIMIT OFFSET_,LIMIT_;

ELSE IF PROJECTNAME_ = '' THEN

SET PROJ_COD_ = CONCAT('%',LOWER(PROJECTCODE_ ),'%');

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,
DATE_FORMAT(TRN_PROJ_DETAILS.START_DATE,'%d %b, %Y') AS START_DATE,
DATE_FORMAT(TRN_PROJ_DETAILS.END_DATE,'%d %b, %Y') AS END_DATE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.PROJ_CODE) LIKE PROJ_COD_
AND LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false'
ORDER BY TRN_PROJ_DETAILS.PROJ_NAME
LIMIT OFFSET_,LIMIT_;

ELSE 

SET PROJ_COD_ = CONCAT('%',LOWER(PROJECTCODE_ ),'%');

SET PROJ_ = CONCAT('%',LOWER(PROJECTNAME_),'%');

SELECT TRN_PROJ_DETAILS.ID,TRN_PROJ_DETAILS.PROJ_NAME,TRN_PROJ_DETAILS.PROJ_CODE,
DATE_FORMAT(TRN_PROJ_DETAILS.START_DATE,'%d %b, %Y') AS START_DATE,
DATE_FORMAT(TRN_PROJ_DETAILS.END_DATE,'%d %b, %Y') AS END_DATE,MST_SYS_USER.DISP_NAME 
FROM TRN_PROJ_DETAILS
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_DETAILS.PROJ_MGR
WHERE LOWER(TRN_PROJ_DETAILS.PROJ_CODE) LIKE PROJ_COD_ OR LOWER(TRN_PROJ_DETAILS.PROJ_NAME) LIKE PROJ_
AND LOWER(TRN_PROJ_DETAILS.IS_DELETED) = 'false'
ORDER BY TRN_PROJ_DETAILS.PROJ_NAME
LIMIT OFFSET_,LIMIT_;

END IF;

END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECT_CLIENT`(ID_ INT(11))
BEGIN

SELECT
	ID,
	PROJ_ID,
	CLIENT_NAME,
	LPAD(CLIENT_NBR, 10, 0) AS CLIENT_NBR,
	CLIENT_EMAIL,
	CLIENT_WEBSITE,
	CONTACT_PERSON,
	CLIENT_ADDR
FROM
	TRN_PROJ_CLIENT
WHERE
	ID = ID_
AND IS_DELETED = 'false';

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECT_CLIENT_ALL`(PROJ_ID_ INT(11))
BEGIN

SELECT ID,CLIENT_NAME,CLIENT_NBR,CLIENT_EMAIL,CLIENT_WEBSITE,CONTACT_PERSON,CLIENT_ADDR
FROM TRN_PROJ_CLIENT
WHERE PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECT_CLIENT_LIMIT`(PROJ_ID_ INT(11), LIMIT_ INT, OFFSET_ INT)
BEGIN

SELECT ID,PROJ_ID,CLIENT_NAME,CLIENT_NBR,CLIENT_EMAIL,CLIENT_WEBSITE,CONTACT_PERSON,CLIENT_ADDR
FROM TRN_PROJ_CLIENT
WHERE PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECT_CLIENT_STAFF`(ID_ INT(11))
BEGIN

SELECT ID,CLIENT_ID,STAFF_NAME,LPAD(STAFF_NBR,10,0) AS STAFF_NBR,STAFF_EMAIL,STAFF_ROLE
FROM TRN_PROJ_CLIENT_STAFF
WHERE ID = ID_ AND IS_DELETED  = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECT_CLIENT_STAFF_ALL`(CLIENT_ID_ INT(11))
BEGIN

SELECT ID,STAFF_NAME,STAFF_NBR,STAFF_EMAIL,STAFF_ROLE
FROM TRN_PROJ_CLIENT_STAFF
WHERE CLIENT_ID = CLIENT_ID_ AND IS_DELETED  = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECT_CLIENT_STAFF_LIMIT`(CLIENT_ID_ INT(11), LIMIT_ INT, OFFSET_ INT)
BEGIN

SELECT ID,CLIENT_ID,STAFF_NAME,STAFF_NBR,STAFF_EMAIL,STAFF_ROLE
FROM TRN_PROJ_CLIENT_STAFF
WHERE CLIENT_ID = CLIENT_ID_ AND IS_DELETED  = 'false'
LIMIT OFFSET_,LIMIT_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJECT_DTL`(PROJECT_ID INT)
BEGIN

SELECT
	TRN_PROJ_DETAILS.ID,
	TRN_PROJ_DETAILS.PROJ_NAME,
	TRN_PROJ_DETAILS.PROJ_CODE,
	DATE_FORMAT(
		TRN_PROJ_DETAILS.START_DATE,
		'%d/%c/%Y'
	) AS START_DATE,
	DATE_FORMAT(
		TRN_PROJ_DETAILS.END_DATE,
		'%d/%c/%Y'
	) AS END_DATE,
	TRN_PROJ_DETAILS.PROJ_OBJ,
	TRN_PROJ_DETAILS.PROJ_DESC
FROM
	TRN_PROJ_DETAILS
WHERE
	TRN_PROJ_DETAILS.ID = PROJECT_ID
AND TRN_PROJ_DETAILS.IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_BUDGET`(ID_ INT, PROJ_ID_ INT)
BEGIN

SELECT
			TRN_PROJ_BUDGET.ID,
			TRN_PROJ_BUDGET.PROJ_ID,
		MST_PROJ_FIN_SUBCATG.CATG_ID AS CAT_ID,
			TRN_PROJ_BUDGET.SUB_CATG_ID,
			FORMAT((SELECT SUM(ITEM_AMT) FROM TRN_PROJ_BUDGET 
			INNER JOIN MST_PROJ_FIN_SUBCATG ON MST_PROJ_FIN_SUBCATG.ID = TRN_PROJ_BUDGET.SUB_CATG_ID
			WHERE TRN_PROJ_BUDGET.PROJ_ID = PROJ_ID_
			AND MST_PROJ_FIN_SUBCATG.CATG_ID =
			(SELECT CATG_ID FROM MST_PROJ_FIN_SUBCATG WHERE ID = 
			(SELECT SUB_CATG_ID FROM TRN_PROJ_BUDGET WHERE ID = ID_))),0) AS TOTAL_AMT,
			FORMAT(TRN_PROJ_BUDGET.ITEM_AMT,0) AS ITEM_AMT,
			ROUND(((TRN_PROJ_BUDGET.ITEM_AMT / 
			(SELECT SUM(ITEM_AMT) FROM TRN_PROJ_BUDGET 
			INNER JOIN MST_PROJ_FIN_SUBCATG ON MST_PROJ_FIN_SUBCATG.ID = TRN_PROJ_BUDGET.SUB_CATG_ID
			WHERE TRN_PROJ_BUDGET.PROJ_ID = PROJ_ID_
			AND MST_PROJ_FIN_SUBCATG.CATG_ID =
			(SELECT CATG_ID FROM MST_PROJ_FIN_SUBCATG WHERE ID = 
			(SELECT SUB_CATG_ID FROM TRN_PROJ_BUDGET WHERE ID = ID_))))*100),1) AS ITEM_PCTG,
			TRN_PROJ_BUDGET.OTHER_DTL,
			TRN_PROJ_BUDGET.IS_DELETED,
			TRN_PROJ_BUDGET.UPDATED_BY,
			TRN_PROJ_BUDGET.UPDATED_DATE,
			TRN_PROJ_BUDGET.CREATED_BY,
			TRN_PROJ_BUDGET.CREATED_DATE
FROM TRN_PROJ_BUDGET
INNER JOIN MST_PROJ_FIN_SUBCATG ON MST_PROJ_FIN_SUBCATG.ID = TRN_PROJ_BUDGET.SUB_CATG_ID
WHERE TRN_PROJ_BUDGET.IS_DELETED = 'false'
AND TRN_PROJ_BUDGET.ID = ID_
AND TRN_PROJ_BUDGET.PROJ_ID = PROJ_ID_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_BUDGET_ALL`(PROJ_ID_ INT)
BEGIN

SELECT
	TRN_PROJ_BUDGET.ID,
	TRN_PROJ_BUDGET.PROJ_ID,
	TRN_PROJ_BUDGET.SUB_CATG_ID,
	MST_PROJ_FIN_SUBCATG.SUB_CATG,
	FORMAT(TRN_PROJ_BUDGET.ITEM_AMT, 0) AS ITEM_AMT,
	TRN_PROJ_BUDGET.ITEM_PCTG,
	TRN_PROJ_BUDGET.OTHER_DTL,
	TRN_PROJ_BUDGET.IS_DELETED,
	TRN_PROJ_BUDGET.UPDATED_DATE,
	TRN_PROJ_BUDGET.UPDATED_BY,
	TRN_PROJ_BUDGET.CREATED_BY,
	TRN_PROJ_BUDGET.CREATED_DATE,
	TRN_PROJ_BUDGET.SUB_CATG_ID
FROM
	TRN_PROJ_BUDGET
INNER JOIN MST_PROJ_FIN_SUBCATG ON TRN_PROJ_BUDGET.SUB_CATG_ID = MST_PROJ_FIN_SUBCATG.ID
WHERE TRN_PROJ_BUDGET.IS_DELETED = 'false'
AND MST_PROJ_FIN_SUBCATG.IS_DELETED = 'false'
AND TRN_PROJ_BUDGET.PROJ_ID = PROJ_ID_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_BUDGET_LIMIT`(PROJ_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

SELECT
	TRN_PROJ_BUDGET.ID,
	TRN_PROJ_BUDGET.PROJ_ID,
	MST_PROJ_FIN_SUBCATG.CATG_ID,
	MST_PROJ_FIN_CATG.CATG,
	TRN_PROJ_BUDGET.SUB_CATG_ID,
	MST_PROJ_FIN_SUBCATG.SUB_CATG,
	FORMAT((SELECT SUM(ITEM_AMT) 
	FROM TRN_PROJ_BUDGET 
	WHERE PROJ_ID = PROJ_ID_),0) AS TOTAL_AMT,
	FORMAT(TRN_PROJ_BUDGET.ITEM_AMT, 0) AS ITEM_AMT,
	ROUND(((TRN_PROJ_BUDGET.ITEM_AMT / 
	(SELECT SUM(ITEM_AMT) 
	FROM TRN_PROJ_BUDGET 
	WHERE PROJ_ID = PROJ_ID_))*100),1) AS ITEM_PCTG,
	TRN_PROJ_BUDGET.OTHER_DTL,
	TRN_PROJ_BUDGET.IS_DELETED,
	TRN_PROJ_BUDGET.UPDATED_DATE,
	TRN_PROJ_BUDGET.UPDATED_BY,
	TRN_PROJ_BUDGET.CREATED_BY,
	TRN_PROJ_BUDGET.CREATED_DATE
FROM TRN_PROJ_BUDGET
INNER JOIN MST_PROJ_FIN_SUBCATG ON TRN_PROJ_BUDGET.SUB_CATG_ID = MST_PROJ_FIN_SUBCATG.ID
INNER JOIN MST_PROJ_FIN_CATG ON MST_PROJ_FIN_CATG.ID = MST_PROJ_FIN_SUBCATG.CATG_ID
WHERE TRN_PROJ_BUDGET.IS_DELETED = 'false'
AND MST_PROJ_FIN_SUBCATG.IS_DELETED = 'false'
AND TRN_PROJ_BUDGET.PROJ_ID = PROJ_ID_
LIMIT OFFSET_,LIMIT_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_DISPUTE`(ID_ INT)
BEGIN


SELECT
TRN_PROJ_DISPUTE.ID,
TRN_PROJ_DISPUTE.PAP_ID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PROJ_ID,
TRN_PROJ_DISPUTE.CATG_ID,
MST_PROJ_DISPUTE.DISP_CATG,
TRN_PROJ_DISPUTE.OTHER_DTL,
DATE_FORMAT(TRN_PROJ_DISPUTE.DATE_LOG,'%d/%c/%Y') AS DATE_LOG,
MST_SYS_USER.DISP_NAME,
TRN_PROJ_DISPUTE.DISP_STATUS,
TRN_PROJ_DISPUTE.LOG_BY
FROM TRN_PROJ_DISPUTE
INNER JOIN MST_PROJ_DISPUTE ON TRN_PROJ_DISPUTE.CATG_ID = MST_PROJ_DISPUTE.ID 
INNER JOIN TRN_BIO_PAP_INFO ON TRN_PROJ_DISPUTE.PAP_ID = TRN_BIO_PAP_INFO.HHID
INNER JOIN MST_SYS_USER ON TRN_PROJ_DISPUTE.LOG_BY = MST_SYS_USER.ID
WHERE TRN_PROJ_DISPUTE.ID = ID_
AND TRN_PROJ_DISPUTE.IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_DISPUTE_ALL`(PROJ_ID_ INT)
BEGIN

SELECT
TRN_PROJ_DISPUTE.ID,
TRN_PROJ_DISPUTE.PAP_ID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PROJ_ID,
TRN_PROJ_DISPUTE.CATG_ID,
MST_PROJ_DISPUTE.DISP_CATG,
TRN_PROJ_DISPUTE.OTHER_DTL,
TRN_PROJ_DISPUTE.DATE_LOG,
MST_SYS_USER.DISP_NAME,
TRN_PROJ_DISPUTE.DISP_STATUS,
TRN_PROJ_DISPUTE.LOG_BY
FROM TRN_PROJ_DISPUTE
INNER JOIN MST_PROJ_DISPUTE ON TRN_PROJ_DISPUTE.CATG_ID = MST_PROJ_DISPUTE.ID 
INNER JOIN TRN_BIO_PAP_INFO ON TRN_PROJ_DISPUTE.PAP_ID = TRN_BIO_PAP_INFO.HHID
INNER JOIN MST_SYS_USER ON TRN_PROJ_DISPUTE.LOG_BY = MST_SYS_USER.ID
WHERE TRN_BIO_PAP_INFO.PROJ_ID = PROJ_ID_
AND TRN_PROJ_DISPUTE.IS_DELETED = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_DISPUTE_LIMIT`(PROJ_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

SELECT
TRN_PROJ_DISPUTE.ID,
TRN_PROJ_DISPUTE.PAP_ID,
TRN_BIO_PAP_INFO.PAP_NAME,
TRN_BIO_PAP_INFO.PROJ_ID,
TRN_PROJ_DISPUTE.CATG_ID,
MST_PROJ_DISPUTE.DISP_CATG,
TRN_PROJ_DISPUTE.OTHER_DTL,
TRN_PROJ_DISPUTE.DATE_LOG,
MST_SYS_USER.DISP_NAME,
TRN_PROJ_DISPUTE.DISP_STATUS,
TRN_PROJ_DISPUTE.LOG_BY
FROM TRN_PROJ_DISPUTE
INNER JOIN MST_PROJ_DISPUTE ON TRN_PROJ_DISPUTE.CATG_ID = MST_PROJ_DISPUTE.ID 
INNER JOIN TRN_BIO_PAP_INFO ON TRN_PROJ_DISPUTE.PAP_ID = TRN_BIO_PAP_INFO.HHID
INNER JOIN MST_SYS_USER ON TRN_PROJ_DISPUTE.LOG_BY = MST_SYS_USER.ID
WHERE TRN_BIO_PAP_INFO.PROJ_ID = PROJ_ID_
AND TRN_PROJ_DISPUTE.IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_DISP_CATG`()
BEGIN

SELECT
MST_PROJ_DISPUTE.ID,
MST_PROJ_DISPUTE.DISP_CATG
FROM MST_PROJ_DISPUTE;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_EXPENSE`(ID_ INT, PROJ_ID_ INT)
BEGIN

SELECT
	TRN_PROJ_EXPENSE.ID,
TRN_PROJ_EXPENSE.EXP_NAME,
	TRN_PROJ_EXPENSE.PROJ_ID,
	TRN_PROJ_EXPENSE.SUB_CATG_ID,
	MST_PROJ_FIN_SUBCATG.CATG_ID,
	FORMAT(TRN_PROJ_EXPENSE.EXP_AMT,0) AS EXP_AMT,
		DATE_FORMAT(
		TRN_PROJ_EXPENSE.EXP_DATE,
		'%d/%c/%Y'
	) AS EXP_DATE,
	TRN_PROJ_EXPENSE.IS_DELETED,
	TRN_PROJ_EXPENSE.UPDATED_BY,
TRN_PROJ_EXPENSE.UPDATED_DATE,
	TRN_PROJ_EXPENSE.CREATED_BY,
	TRN_PROJ_EXPENSE.CREATED_DATE,
	MST_PROJ_FIN_SUBCATG.IS_DELETED,
TRN_PROJ_EXPENSE.OTHER_DTL
FROM MST_PROJ_FIN_SUBCATG
INNER JOIN TRN_PROJ_EXPENSE ON TRN_PROJ_EXPENSE.SUB_CATG_ID = MST_PROJ_FIN_SUBCATG.ID
WHERE TRN_PROJ_EXPENSE.IS_DELETED = 'false' 
AND MST_PROJ_FIN_SUBCATG.IS_DELETED = 'false'
AND TRN_PROJ_EXPENSE.ID = ID_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_EXPENSE_ALL`(PROJ_ID_ INT)
BEGIN

SELECT *
/* TRN_PROJ_EXPENSE.ID,
TRN_PROJ_EXPENSE.PROJ_ID,
TRN_PROJ_EXPENSE.SUB_CATG_ID,
FORMAT(TRN_PROJ_EXPENSE.EXP_AMT,0) AS EXP_AMT,
TRN_PROJ_EXPENSE.EXP_DATE,
TRN_PROJ_EXPENSE.IS_DELETED,
TRN_PROJ_EXPENSE.UPDATED_BY,
TRN_PROJ_EXPENSE.UPDATED_DATE,
TRN_PROJ_EXPENSE.CREATED_BY,
TRN_PROJ_EXPENSE.CREATED_DATE,
MST_PROJ_FIN_SUBCATG.IS_DELETED */
FROM MST_PROJ_FIN_SUBCATG
INNER JOIN TRN_PROJ_EXPENSE ON TRN_PROJ_EXPENSE.SUB_CATG_ID = MST_PROJ_FIN_SUBCATG.ID
WHERE TRN_PROJ_EXPENSE.IS_DELETED = 'false' 
AND MST_PROJ_FIN_SUBCATG.IS_DELETED = 'false'
AND TRN_PROJ_EXPENSE.PROJ_ID = PROJ_ID_;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_EXPENSE_LIMIT`(PROJ_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

SELECT
	TRN_PROJ_EXPENSE.ID,
	TRN_PROJ_EXPENSE.PROJ_ID,
	TRN_PROJ_EXPENSE.SUB_CATG_ID,
	MST_PROJ_FIN_SUBCATG.CATG_ID,
	MST_PROJ_FIN_CATG.CATG,
	MST_PROJ_FIN_SUBCATG.SUB_CATG,
	TRN_PROJ_EXPENSE.EXP_NAME,
	FORMAT(TRN_PROJ_EXPENSE.EXP_AMT, 0) AS EXP_AMT,
	TRN_PROJ_EXPENSE.EXP_DATE,
	TRN_PROJ_EXPENSE.OTHER_DTL,
	TRN_PROJ_EXPENSE.IS_DELETED,
	TRN_PROJ_EXPENSE.UPDATED_BY,
	TRN_PROJ_EXPENSE.UPDATED_DATE,
	TRN_PROJ_EXPENSE.CREATED_BY,
	TRN_PROJ_EXPENSE.CREATED_DATE,
	MST_PROJ_FIN_SUBCATG.IS_DELETED
FROM MST_PROJ_FIN_SUBCATG
INNER JOIN TRN_PROJ_EXPENSE ON TRN_PROJ_EXPENSE.SUB_CATG_ID = MST_PROJ_FIN_SUBCATG.ID
INNER JOIN MST_PROJ_FIN_CATG ON MST_PROJ_FIN_CATG.ID = MST_PROJ_FIN_SUBCATG.CATG_ID
WHERE TRN_PROJ_EXPENSE.IS_DELETED = 'false' 
AND MST_PROJ_FIN_SUBCATG.IS_DELETED = 'false'
AND TRN_PROJ_EXPENSE.PROJ_ID = PROJ_ID_
LIMIT OFFSET_,LIMIT_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_FIN_CATG`()
BEGIN

SELECT 
ID,
CATG,
OTHER_DTL,
IS_DELETED
FROM MST_PROJ_FIN_CATG
WHERE IS_DELETED = 'false';





END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_FIN_SUBCATG`(CATG_ID_ INT)
BEGIN

SELECT ID,CATG_ID,SUB_CATG,OTHER_DTL,IS_DELETED
FROM MST_PROJ_FIN_SUBCATG
WHERE IS_DELETED = 'false'
AND CATG_ID = CATG_ID_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_SECT`(ID_ INT)
BEGIN


SELECT ID,SECT_NAME,SECT_LENGTH,PROJ_ID,OTHER_DTL,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM TRN_PROJ_SECTIONS WHERE ID = ID_ AND IS_DELETED = 'false';






END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_SECT_ALL`(PROJ_ID_ INT(11))
BEGIN


SELECT ID,SECT_NAME,SECT_LENGTH,PROJ_ID,OTHER_DTL,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM TRN_PROJ_SECTIONS
WHERE PROJ_ID = PROJ_ID_
AND IS_DELETED = 'false';






END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_SECT_LIMIT`(PROJ_ID_ INT, LIMIT_ INT, OFFSET_ INT)
BEGIN

SELECT ID,SECT_NAME,SECT_LENGTH,PROJ_ID,OTHER_DTL,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM TRN_PROJ_SECTIONS WHERE PROJ_ID = PROJ_ID_ AND IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_STAFF`(USER_ID_ INT, PROJ_ID_ INT, ROLE_ID_ INT)
BEGIN


SELECT
TRN_PROJ_STAFF.ID,
TRN_PROJ_STAFF.USER_ID,
TRN_PROJ_STAFF.PROJ_ID,
MST_SYS_USER.USER_NAME,
MST_SYS_USER.DISP_NAME,
TRN_PROJ_STAFF.ROLE_ID,
MST_SYS_USER_ROLE.ROLE,
TRN_PROJ_STAFF.OTHER_DTL,
TRN_PROJ_STAFF.UPDATED_BY,
TRN_PROJ_STAFF.UPDATED_DATE,
TRN_PROJ_STAFF.CREATED_BY,
TRN_PROJ_STAFF.CREATED_DATE
FROM TRN_PROJ_STAFF
INNER JOIN MST_SYS_USER ON MST_SYS_USER.ID = TRN_PROJ_STAFF.USER_ID
INNER JOIN MST_SYS_USER_ROLE ON TRN_PROJ_STAFF.ROLE_ID = MST_SYS_USER_ROLE.ID
WHERE TRN_PROJ_STAFF.IS_DELETED = 'false' AND
MST_SYS_USER.IS_DELETED = 'false' AND
MST_SYS_USER_ROLE.IS_DELETED = 'false' AND
TRN_PROJ_STAFF.USER_ID = USER_ID_ AND
TRN_PROJ_STAFF.PROJ_ID = PROJ_ID_
AND TRN_PROJ_STAFF.ROLE_ID = ROLE_ID_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_STAFF_ALL`(PROJ_ID_ INT)
BEGIN

SELECT * FROM TRN_PROJ_STAFF
WHERE PROJ_ID = PROJ_ID_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_PROJ_STAFF_LIMIT`(PROJ_ID_ INT, OFFSET_ INT, LIMIT_ INT)
BEGIN

SELECT
TRN_PROJ_STAFF.ID,
MST_SYS_USER.ID AS USER_ID,
TRN_PROJ_STAFF.PROJ_ID,
MST_SYS_USER.USER_NAME,
MST_SYS_USER.DISP_NAME,
MST_SYS_USER_ROLE.ID AS ROLE_ID,
MST_SYS_USER_ROLE.ROLE,
TRN_PROJ_STAFF.OTHER_DTL,
TRN_PROJ_STAFF.UPDATED_BY,
TRN_PROJ_STAFF.UPDATED_DATE,
TRN_PROJ_STAFF.CREATED_BY,
TRN_PROJ_STAFF.CREATED_DATE
FROM TRN_PROJ_STAFF
INNER JOIN MST_SYS_USER ON TRN_PROJ_STAFF.USER_ID = MST_SYS_USER.ID
INNER JOIN MST_SYS_USER_ROLE ON TRN_PROJ_STAFF.ROLE_ID = MST_SYS_USER_ROLE.ID
WHERE TRN_PROJ_STAFF.IS_DELETED = 'false' AND
MST_SYS_USER.IS_DELETED = 'false' AND
MST_SYS_USER_ROLE.IS_DELETED = 'false' AND
TRN_PROJ_STAFF.PROJ_ID = PROJ_ID_
LIMIT OFFSET_,LIMIT_;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_RELATION_DROP`()
BEGIN

SELECT
ID,RELATION,IS_DELETED
FROM MST_BIO_RELATION
WHERE IS_DELETED = 'false'
ORDER BY RELATION;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_SUBCOUNTY`(CTY_ID_ INT)
BEGIN

SELECT ID,SUBCOUNTY,CTY_ID,OTHER_DTL,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM MST_BIO_SUBCOUNTY WHERE IS_DELETED = 'false' AND CTY_ID = CTY_ID_
ORDER BY SUBCOUNTY;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_SYS_SESSION`(USERID_ INT)
BEGIN

DECLARE LOGIN_STATUS VARCHAR(10);
DECLARE SESSIONID_ VARCHAR(40);
DECLARE ROLENAME_ VARCHAR(20);


SELECT TRN_SYS_SESSION.SESSION_ID INTO SESSIONID_
FROM TRN_SYS_SESSION
JOIN MST_SYS_USER ON TRN_SYS_SESSION.USER_ID = MST_SYS_USER.ID
INNER JOIN MST_SYS_USER_ROLE ON MST_SYS_USER.ROLE_ID = MST_SYS_USER_ROLE.ID
WHERE TRN_SYS_SESSION.USER_ID = USERID_
AND LOWER(TRN_SYS_SESSION.IS_DELETED) = 'false'
AND TRN_SYS_SESSION.LOGOUT_DATE IS NULL;
-- AND MST_SYS_USER_ROLE.ROLENAME <> 'System Admin';


SELECT MST_SYS_USER_ROLE.ROLE INTO ROLENAME_
FROM MST_SYS_USER JOIN MST_SYS_USER_ROLE
ON MST_SYS_USER.ROLE_ID = MST_SYS_USER_ROLE.ID
WHERE MST_SYS_USER.ID = USERID_
AND LOWER(MST_SYS_USER.IS_DELETED) = 'false';

-- AND MST_SYS_USER.ROLEID <> ANY
-- SELECT ID FROM MST_SYS_USER_ROLE WHERE ROLENAME = 'System Admin');

IF SESSIONID_ IS NULL THEN
SET LOGIN_STATUS = "FALSE";
ELSE
SET LOGIN_STATUS = "TRUE";
END IF;

SELECT LOGIN_STATUS, SESSIONID_, ROLENAME_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_SYS_SESSION_ADMIN`(USERID_ INT, SESSIONID_IN VARCHAR(40))
BEGIN

DECLARE LOGIN_STATUS VARCHAR(10);
DECLARE SESSIONID_ VARCHAR(40);
DECLARE ROLENAME_ VARCHAR(20);


SELECT TRN_SYS_SESSION.SESSION_ID INTO SESSIONID_
FROM TRN_SYS_SESSION
JOIN MST_SYS_USER ON TRN_SYS_SESSION.USER_ID = MST_SYS_USER.ID
INNER JOIN MST_SYS_USER_ROLE ON MST_SYS_USER.ROLE_ID = MST_SYS_USER_ROLE.ID
WHERE TRN_SYS_SESSION.USER_ID = USERID_ 
AND TRN_SYS_SESSION.LOGOUT_DATE IS NULL
AND TRN_SYS_SESSION.SESSION_ID = SESSIONID_IN
AND LOWER(TRN_SYS_SESSION.IS_DELETED) = 'false'
AND MST_SYS_USER_ROLE.ROLE = 'System Admin';


SELECT MST_SYS_USER_ROLE.ROLE INTO ROLENAME_
FROM MST_SYS_USER JOIN MST_SYS_USER_ROLE
ON MST_SYS_USER.ROLE_ID = MST_SYS_USER_ROLE.ID
WHERE MST_SYS_USER.ID = USERID_
AND LOWER(MST_SYS_USER.IS_DELETED) = 'false';

-- AND MST_SYS_USER.ROLEID <> ANY
-- SELECT ID FROM MST_SYS_USER_ROLE WHERE ROLENAME = 'System Admin');

IF SESSIONID_ IS NULL THEN
SET LOGIN_STATUS = "FALSE";
ELSE
SET LOGIN_STATUS = "TRUE";
END IF;

SELECT LOGIN_STATUS, SESSIONID_, ROLENAME_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_USER_ALL`()
BEGIN

SELECT
MST_SYS_USER.ID,
MST_SYS_USER.USER_NAME,
MST_SYS_USER.PWD,
MST_SYS_USER.DISP_NAME,
MST_SYS_USER.EMAIL,
MST_SYS_USER.PHONE,
MST_SYS_USER.ROLE_ID,
MST_SYS_USER.IS_DELETED,
MST_SYS_USER.UPDATED_BY,
MST_SYS_USER.UPDATED_DATE,
MST_SYS_USER.CREATED_BY,
MST_SYS_USER.CREATED_DATE
FROM
MST_SYS_USER;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_USER_ROLE_ALL`()
BEGIN

SELECT
MST_SYS_USER_ROLE.ID,
MST_SYS_USER_ROLE.ROLE,
MST_SYS_USER_ROLE.OTHER_DTL,
MST_SYS_USER_ROLE.IS_DELETED,
MST_SYS_USER_ROLE.UPDATED_BY,
MST_SYS_USER_ROLE.UPDATED_DATE,
MST_SYS_USER_ROLE.CREATED_BY,
MST_SYS_USER_ROLE.CREATED_DATE
FROM
MST_SYS_USER_ROLE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_CROP`(ID_ INT)
BEGIN

SELECT ID,PAP_ID,CROP_ID,UNIT_MSR,RATE,OTHER_DTL,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE,
CROP_TYPE,CROP_DESC,CROP_UNITS
FROM TRN_VAL_CROP
WHERE ID = ID_ AND IS_DELETED = 'false';

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_CROP_ALL`(PAP_ID_ INT)
BEGIN

SELECT TVC.ID,TVC.PAP_ID,TVC.CROP_ID,TVC.CROP_TYPE,TVC.CROP_DESC,TVC.CROP_UNITS,TVC.UNIT_MSR,TVC.RATE,TVC.OTHER_DTL,TVC.IS_DELETED,
TVC.UPDATED_BY,TVC.UPDATED_DATE,TVC.CREATED_BY,TVC.CREATED_DATE,MVCT.CROP_TYPE,MVC.CROP
FROM TRN_VAL_CROP AS TVC 
INNER JOIN MST_VAL_CROP AS MVC ON TVC.CROP_ID = MVC.ID
INNER JOIN MST_VAL_CROP_TYPE AS MVCT ON TVC.CROP_TYPE = MVCT.ID 
WHERE TVC.PAP_ID = PAP_ID_ AND TVC.IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_CROP_LIMIT`(PAP_ID INT, LIMIT_ INT, OFFSET_ INT)
BEGIN

SELECT TVC.ID,TVC.PAP_ID,TVC.CROP_ID,TVC.CROP_TYPE,TVC.CROP_DESC,TVC.CROP_UNITS,TVC.UNIT_MSR,TVC.RATE,TVC.OTHER_DTL,TVC.IS_DELETED,
TVC.UPDATED_BY,TVC.UPDATED_DATE,TVC.CREATED_BY,TVC.CREATED_DATE,MVCT.CROP_TYPE,MVC.CROP
FROM TRN_VAL_CROP AS TVC 
INNER JOIN MST_VAL_CROP AS MVC ON TVC.CROP_ID = MVC.ID
INNER JOIN MST_VAL_CROP_TYPE AS MVCT ON TVC.CROP_TYPE = MVCT.ID 
WHERE TVC.PAP_ID = PAP_ID_ AND TVC.IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_DISPUTE`(ID_ INT, PAP_ID_ INT)
BEGIN


SELECT
TRN_VAL_DISPUTE.ID,
TRN_VAL_DISPUTE.PAP_ID,
TRN_VAL_DISPUTE.CATG_ID,
TRN_VAL_DISPUTE.OTHER_DTL,
TRN_VAL_DISPUTE.DATE_LOG,
TRN_VAL_DISPUTE.DISP_STATUS,
TRN_VAL_DISPUTE.LOG_BY,
TRN_VAL_DISPUTE.IS_DELETED,
TRN_VAL_DISPUTE.UPDATED_BY,
TRN_VAL_DISPUTE.UPDATED_DATE,
TRN_VAL_DISPUTE.CREATED_BY,
TRN_VAL_DISPUTE.CREATED_DATE
FROM TRN_VAL_DISPUTE
WHERE TRN_VAL_DISPUTE.ID = ID_
AND TRN_VAL_DISPUTE.PAP_ID = PAP_ID_
AND TRN_VAL_DISPUTE.IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_DISPUTE_ALL`(PAP_ID_ INT)
BEGIN


SELECT
TRN_VAL_DISPUTE.ID,
TRN_VAL_DISPUTE.PAP_ID,
TRN_VAL_DISPUTE.CATG_ID,
TRN_VAL_DISPUTE.OTHER_DTL,
TRN_VAL_DISPUTE.DATE_LOG,
TRN_VAL_DISPUTE.DISP_STATUS,
TRN_VAL_DISPUTE.LOG_BY,
TRN_VAL_DISPUTE.IS_DELETED,
TRN_VAL_DISPUTE.UPDATED_BY,
TRN_VAL_DISPUTE.UPDATED_DATE,
TRN_VAL_DISPUTE.CREATED_BY,
TRN_VAL_DISPUTE.CREATED_DATE
FROM TRN_VAL_DISPUTE
WHERE TRN_VAL_DISPUTE.PAP_ID = PAP_ID_
AND TRN_VAL_DISPUTE.IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_DISPUTE_LIMIT`(PAP_ID_ INT, LIMIT_ INT, OFFSET_ INT)
BEGIN


SELECT
TRN_VAL_DISPUTE.ID,
TRN_VAL_DISPUTE.PAP_ID,
TRN_VAL_DISPUTE.CATG_ID,
TRN_VAL_DISPUTE.OTHER_DTL,
TRN_VAL_DISPUTE.DATE_LOG,
TRN_VAL_DISPUTE.DISP_STATUS,
TRN_VAL_DISPUTE.LOG_BY,
TRN_VAL_DISPUTE.IS_DELETED,
TRN_VAL_DISPUTE.UPDATED_BY,
TRN_VAL_DISPUTE.UPDATED_DATE,
TRN_VAL_DISPUTE.CREATED_BY,
TRN_VAL_DISPUTE.CREATED_DATE
FROM TRN_VAL_DISPUTE
WHERE TRN_VAL_DISPUTE.PAP_ID = PAP_ID_
AND TRN_VAL_DISPUTE.IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_FIX`(ID_ INT)
BEGIN

SELECT ID,PAP_ID,FIX_TYPE,FIX_DESC,FIX_UNITS,UNIT_MSR,RATE,
OTHER_DTL,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE
FROM TRN_VAL_FIX WHERE IS_DELETED = 'false' AND ID = ID_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_FIX_ALL`(PAP_ID_ INT)
BEGIN

SELECT TVF.ID,TVF.PAP_ID,MVFT.FIX_TYPE,TVF.FIX_DESC,TVF.FIX_UNITS,TVF.UNIT_MSR,TVF.RATE,TVF.OTHER_DTL,
TVF.IS_DELETED,TVF.UPDATED_BY,TVF.UPDATED_DATE,TVF.CREATED_BY,TVF.CREATED_DATE
FROM TRN_VAL_FIX AS TVF INNER JOIN MST_VAL_FIX_TYPE AS MVFT ON TVF.FIX_TYPE = MVFT.ID
WHERE TVF.IS_DELETED = 'false' AND TVF.PAP_ID = PAP_ID_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_FIX_LIMIT`(PAP_ID_ INT, LIMIT_ INT, OFFSET_ INT)
BEGIN

SELECT TVF.ID,TVF.PAP_ID,MVFT.FIX_TYPE,TVF.FIX_DESC,TVF.FIX_UNITS,TVF.UNIT_MSR,TVF.RATE,TVF.OTHER_DTL,
TVF.IS_DELETED,TVF.UPDATED_BY,TVF.UPDATED_DATE,TVF.CREATED_BY,TVF.CREATED_DATE
FROM TRN_VAL_FIX AS TVF INNER JOIN MST_VAL_FIX_TYPE AS MVFT ON TVF.FIX_TYPE = MVFT.ID
WHERE TVF.IS_DELETED = 'false' 
AND TVF.PAP_ID = PAP_ID_
LIMIT OFFSET_,LIMIT_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND`(PAP_ID_ INT)
BEGIN

SELECT 
TRN_VAL_LAND.PAP_ID,
TRN_VAL_LAND.UNIT_MSR,
TRN_VAL_LAND.SHARE_OF_LND,
TRN_VAL_LAND.DIMINUTION,
TRN_VAL_LAND.IS_TITLED,
TRN_VAL_LAND.IS_DELETED,
TRN_VAL_LAND.UPDATED_BY,
TRN_VAL_LAND.UPDATED_DATE,
TRN_VAL_LAND.CREATED_BY,
TRN_VAL_LAND.CREATED_DATE,
TRN_VAL_LAND.PLOT,
TRN_VAL_LAND.BLOCK,
(SELECT COUNT(PAP_ID) FROM TRN_VAL_LAND WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false') AS PAP_COUNT,
TRN_VAL_LAND.ROW_UNITS,
TRUNCATE(USP_GET_VAL_LAND_ACRES(TRN_VAL_LAND.UNIT_MSR,TRN_VAL_LAND.ROW_UNITS),11) AS ROW_UNITS_AC,
USP_GET_VAL_LAND_OTHER_UNITS(TRN_VAL_LAND.UNIT_MSR,TRN_VAL_LAND.ROW_UNITS) AS ROW_OTHER_UNITS,
TRUNCATE((USP_GET_VAL_LAND_ACRES(TRN_VAL_LAND.UNIT_MSR,TRN_VAL_LAND.ROW_UNITS) * (TRN_VAL_LAND.SHARE_OF_LND / 100) * TRN_VAL_LAND.RATE),0) AS ROW_VALUE,
TRN_VAL_LAND.WL_UNITS,
TRUNCATE(USP_GET_VAL_LAND_ACRES(TRN_VAL_LAND.UNIT_MSR,TRN_VAL_LAND.WL_UNITS),11) AS WL_UNITS_AC,
USP_GET_VAL_LAND_OTHER_UNITS(TRN_VAL_LAND.UNIT_MSR,TRN_VAL_LAND.WL_UNITS) AS WL_OTHER_UNITS,
TRUNCATE((USP_GET_VAL_LAND_ACRES(TRN_VAL_LAND.UNIT_MSR,TRN_VAL_LAND.WL_UNITS) * (TRN_VAL_LAND.SHARE_OF_LND / 100) * (TRN_VAL_LAND.DIMINUTION / 100) * TRN_VAL_LAND.RATE),0) AS WL_VALUE,
TRN_VAL_LAND.RATE,
(SELECT LND_TYPE FROM MST_VAL_LND_TYPE WHERE ID = (SELECT LND_TYPE FROM TRN_VAL_LAND WHERE PAP_ID = PAP_ID_)) AS LND_TYPE,
(SELECT ID FROM MST_VAL_LND_TYPE WHERE ID = (SELECT LND_TYPE FROM TRN_VAL_LAND WHERE PAP_ID = PAP_ID_)) AS LND_TYPE_ID,
(SELECT PAP_STATUS_ID FROM TRN_BIO_PAP_INFO WHERE HHID = PAP_ID_) AS PAP_STATUS_ID,
(SELECT MST_BIO_PAPSTATUS.PAP_STATUS FROM TRN_BIO_PAP_INFO 
INNER JOIN MST_BIO_PAPSTATUS ON TRN_BIO_PAP_INFO.PAP_STATUS_ID = MST_BIO_PAPSTATUS.ID
WHERE TRN_BIO_PAP_INFO.HHID = PAP_ID_) AS PAP_STATUS
FROM TRN_VAL_LAND
WHERE TRN_VAL_LAND.IS_DELETED = 'false'
AND TRN_VAL_LAND.PAP_ID = PAP_ID_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_GIS`(ID_ INT)
BEGIN


SELECT
TRN_VAL_LAND_GIS.ID,
TRN_VAL_LAND_GIS.PAP_ID,
TRN_VAL_LAND_GIS.GIS_X,
TRN_VAL_LAND_GIS.GIS_Y,
TRN_VAL_LAND_GIS.GIS_Z,
TRN_VAL_LAND_GIS.LATITUDE,
TRN_VAL_LAND_GIS.LONGITUDE,
TRN_VAL_LAND_GIS.IS_DELETED,
TRN_VAL_LAND_GIS.CREATED_BY,
TRN_VAL_LAND_GIS.CREATED_DATE,
TRN_VAL_LAND_GIS.UPDATED_BY,
TRN_VAL_LAND_GIS.UPDATED_DATE
FROM TRN_VAL_LAND_GIS
WHERE TRN_VAL_LAND_GIS.ID = ID_
AND IS_DELETED = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_GIS_ALL`(PAP_ID_ INT)
BEGIN


SELECT
TRN_VAL_LAND_GIS.ID,
TRN_VAL_LAND_GIS.PAP_ID,
TRN_VAL_LAND_GIS.GIS_X,
TRN_VAL_LAND_GIS.GIS_Y,
TRN_VAL_LAND_GIS.GIS_Z,
TRN_VAL_LAND_GIS.LATITUDE,
TRN_VAL_LAND_GIS.LONGITUDE,
TRN_VAL_LAND_GIS.IS_DELETED,
TRN_VAL_LAND_GIS.CREATED_BY,
TRN_VAL_LAND_GIS.CREATED_DATE,
TRN_VAL_LAND_GIS.UPDATED_BY,
TRN_VAL_LAND_GIS.UPDATED_DATE
FROM TRN_VAL_LAND_GIS
WHERE TRN_VAL_LAND_GIS.PAP_ID = PAP_ID_
AND IS_DELETED = 'false';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_GIS_LIMIT`(PAP_ID_ INT, LIMIT_ INT, OFFSET_ INT)
BEGIN

SELECT
TRN_VAL_LAND_GIS.ID,
TRN_VAL_LAND_GIS.PAP_ID,
TRN_VAL_LAND_GIS.GIS_X,
TRN_VAL_LAND_GIS.GIS_Y,
TRN_VAL_LAND_GIS.GIS_Z,
TRN_VAL_LAND_GIS.LATITUDE,
TRN_VAL_LAND_GIS.LONGITUDE,
TRN_VAL_LAND_GIS.IS_DELETED,
TRN_VAL_LAND_GIS.CREATED_BY,
TRN_VAL_LAND_GIS.CREATED_DATE,
TRN_VAL_LAND_GIS.UPDATED_BY,
TRN_VAL_LAND_GIS.UPDATED_DATE
FROM TRN_VAL_LAND_GIS
WHERE TRN_VAL_LAND_GIS.PAP_ID = PAP_ID_
AND TRN_VAL_LAND_NBR.IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_NBR`(ID_ INT, PAP_ID_ INT)
BEGIN


SELECT
TRN_VAL_LAND_NBR.ID,
TRN_VAL_LAND_NBR.PAP_ID,
TRN_VAL_LAND_NBR.DIRECTION,
TRN_VAL_LAND_NBR.BNDRY_OK,
TRN_VAL_LAND_NBR.OTHER_DTL,
TRN_VAL_LAND_NBR.IS_DELETED,
TRN_VAL_LAND_NBR.UPDATED_BY,
TRN_VAL_LAND_NBR.UPDATED_DATE,
TRN_VAL_LAND_NBR.CREATED_BY,
TRN_VAL_LAND_NBR.CREATED_DATE
FROM TRN_VAL_LAND_NBR
WHERE ID = ID_
AND IS_DELETED = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_NBR_ALL`(PAP_ID_ INT)
BEGIN


SELECT
TRN_VAL_LAND_NBR.ID,
TRN_VAL_LAND_NBR.PAP_ID,
TRN_VAL_LAND_NBR.DIRECTION,
TRN_VAL_LAND_NBR.BNDRY_OK,
TRN_VAL_LAND_NBR.OTHER_DTL,
TRN_VAL_LAND_NBR.IS_DELETED,
TRN_VAL_LAND_NBR.UPDATED_BY,
TRN_VAL_LAND_NBR.UPDATED_DATE,
TRN_VAL_LAND_NBR.CREATED_BY,
TRN_VAL_LAND_NBR.CREATED_DATE
FROM TRN_VAL_LAND_NBR
WHERE TRN_VAL_LAND_NBR.PAP_ID = PAP_ID_
AND TRN_VAL_LAND_NBR.IS_DELETED = 'false';


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_NBR_LIMIT`(PAP_ID_ INT, LIMIT_ INT, OFFSET_ INT)
BEGIN


SELECT
TRN_VAL_LAND_NBR.ID,
TRN_VAL_LAND_NBR.PAP_ID,
TRN_VAL_LAND_NBR.DIRECTION,
TRN_VAL_LAND_NBR.BNDRY_OK,
TRN_VAL_LAND_NBR.OTHER_DTL,
TRN_VAL_LAND_NBR.IS_DELETED,
TRN_VAL_LAND_NBR.UPDATED_BY,
TRN_VAL_LAND_NBR.UPDATED_DATE,
TRN_VAL_LAND_NBR.CREATED_BY,
TRN_VAL_LAND_NBR.CREATED_DATE
FROM TRN_VAL_LAND_NBR
WHERE TRN_VAL_LAND_NBR.PAP_ID = PAP_ID_
AND TRN_VAL_LAND_NBR.IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_STK`(PAP_ID_ INT)
BEGIN


SELECT TRN_BIO_PAP_INFO.HHID,TRN_BIO_PAP_INFO.PAP_NAME,TRN_BIO_PAP_INFO.PLOT_REF,MST_BIO_PAPSTATUS.PAP_STATUS
FROM TRN_BIO_PAP_INFO INNER JOIN MST_BIO_PAPSTATUS ON TRN_BIO_PAP_INFO.PAP_STATUS_ID = MST_BIO_PAPSTATUS.ID
WHERE TRN_BIO_PAP_INFO.IS_DELETED = 'fale'
AND TRN_BIO_PAP_INFO.PLOT_REF = (SELECT PLOT_REF FROM TRN_BIO_PAP_INFO WHERE PAP_ID = PAP_ID_);



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_TYP`()
BEGIN

SELECT
MST_VAL_LND_TYPE.ID,
MST_VAL_LND_TYPE.LND_TYPE
FROM MST_VAL_LND_TYPE
ORDER BY MST_VAL_LND_TYPE.LND_TYPE;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_LAND_UNIT_MSR`()
BEGIN


SELECT
MST_VAL_UNIT_MSR.ID,
MST_VAL_UNIT_MSR.UNIT_MSR
FROM MST_VAL_UNIT_MSR
WHERE IS_DELETED = 'false'
ORDER BY MST_VAL_UNIT_MSR.UNIT_MSR;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_STR`(ID_ INT)
BEGIN

DECLARE ROWS_ INT;

SELECT PAP_ID,UNIT_MSR,STR_VALUE,STR_ROOF,STR_WALL,STR_WINDW,STR_DOOR,STR_FLOOR,OTHER_DTL,IS_DELETED,UPDATED_BY,UPDATED_DATE,ID,STR_NAME,
STR_TYPE,STR_UNITS,RATE,CREATED_BY,CREATED_DATE
FROM TRN_VAL_STR 
WHERE ID = ID_ AND IS_DELETED = 'false';

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_STR_ALL`(PAP_ID_ INT)
BEGIN

DECLARE ROWS_ INT;

SELECT TVS.ID,TVS.PAP_ID,TVS.UNIT_MSR,TVS.STR_VALUE,TVS.STR_ROOF,TVS.STR_WALL,TVS.STR_WINDW,TVS.STR_DOOR,TVS.STR_FLOOR,
TVS.OTHER_DTL,TVS.IS_DELETED,TVS.UPDATED_BY,TVS.UPDATED_DATE,MVST.STR_TYPE,TVS.STR_TYPE,TVS.STR_NAME,TVS.STR_UNITS,TVS.RATE
FROM TRN_VAL_STR AS TVS INNER JOIN MST_VAL_STR_TYPE AS MVST ON TVS.STR_TYPE = MVST.ID 
WHERE TVS.PAP_ID = PAP_ID_ AND TVS.IS_DELETED = 'false';

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_STR_LIMIT`(PAP_ID_ INT, LIMIT_ INT, OFFSET_ INT)
BEGIN

DECLARE ROWS_ INT;

SELECT TVS.ID,TVS.PAP_ID,TVS.UNIT_MSR,TVS.STR_VALUE,TVS.STR_ROOF,TVS.STR_WALL,TVS.STR_WINDW,TVS.STR_DOOR,TVS.STR_FLOOR,
TVS.OTHER_DTL,TVS.IS_DELETED,TVS.UPDATED_BY,TVS.UPDATED_DATE,MVST.STR_TYPE,TVS.STR_TYPE,TVS.STR_NAME,TVS.STR_UNITS,TVS.RATE
FROM TRN_VAL_STR AS TVS INNER JOIN MST_VAL_STR_TYPE AS MVST ON TVS.STR_TYPE = MVST.ID
WHERE TVS.PAP_ID = PAP_ID_ 
AND TVS.IS_DELETED = 'false'
LIMIT OFFSET_,LIMIT_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VAL_TOTALS`(ID_ INT)
BEGIN

SELECT ID,PAP_ID,LAND_VAL,LAND_DA,CROP_VAL,CROP_DA,STR_VAL,STR_DA,FIX_VAL,FIX_DA,ALLOW_VAL,IS_DELETED,CREATED_BY,CREATED_DATE
FROM TRN_VAL_TOTALS WHERE ID = ID_ AND IS_DELETED = 'false';

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_GET_VILLAGE`(SUBCTY_ID_ INT)
BEGIN


SELECT ID,VILLAGE,SUBCTY_ID
FROM MST_BIO_VILLAGE WHERE IS_DELETED = 'false' AND SUBCTY_ID = SUBCTY_ID_
ORDER BY VILLAGE;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_DOC_PHOTO`(PAP_ID_ INT, PROJ_ID_ INT, DOC_TYPE_ VARCHAR(100), DOC_TAG_ VARCHAR(100), FILE_NAME_ VARCHAR(50), FILE_PATH_ VARCHAR(50), USER_ID_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_DOC_UPLOAD (PAP_ID,PROJ_ID,DOC_TYPE,DOC_TAG,FILE_NAME,FILE_PATH,CREATED_BY,CREATED_DATE,UPLOAD_DEVICE,IS_DELETED)
VALUES (PAP_ID_,PROJ_ID_,DOC_TYPE_,DOC_TAG_,FILE_NAME_,FILE_PATH_,USER_ID_,CURRENT_TIMESTAMP(),'Web','false');

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PAP_ADDR`(PAP_ID_ INT, ROAD_ VARCHAR(250), IS_RESIDENT_ VARCHAR(5), VILL_ID_ INT, CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;



INSERT INTO TRN_BIO_PAP_ADDR (PAP_ID, ROAD, IS_RESIDENT, VILL_ID, IS_DELETED, CREATED_BY, CREATED_DATE)
VALUES (PAP_ID_, ROAD_, IS_RESIDENT_, VILL_ID_, 'false', CREATED_BY_, CURRENT_TIMESTAMP());


SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PAP_FAMILY_MBR`(MBR_NAME_ VARCHAR(100), PAP_ID_ INT, RLTN_ID_ INT, DOB_ DATETIME, BIRTH_PLACE_ VARCHAR(20), SEX_ VARCHAR(10), TRIBE_ID_ INT, RELGN_ID_ INT, OTHER_DTL_ VARCHAR(250), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_BIO_PAP_FAMILY (MBR_NAME,PAP_ID,RLTN_ID,DOB,BIRTH_PLACE,SEX,TRIBE_ID,RELGN_ID,OTHER_DTL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (MBR_NAME_, PAP_ID_, RLTN_ID_, DOB_, BIRTH_PLACE_, SEX_, TRIBE_ID_, RELGN_ID_, OTHER_DTL_,'false', CREATED_BY_, CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PAP_INFO`(PAP_NAME_ VARCHAR(50), PLOT_REF_ VARCHAR(20), DESIGN_ VARCHAR(10), PAP_TYPE_ VARCHAR(10), PROJ_ID_ INT, CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_BIO_PAP_INFO (PAP_NAME, PLOT_REF, DESIGN, PAP_TYPE, PROJ_ID, IS_DELETED, CREATED_BY, CREATED_DATE)
VALUES (PAP_NAME_, PLOT_REF_, DESIGN_, PAP_TYPE_, PROJ_ID_, 'false', CREATED_BY_, CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PROJECT_CLIENT`(PROJ_ID_ INT(11), CLIENT_NAME_ VARCHAR(255), CLIENT_NBR_ INT(11), CLIENT_EMAIL_ VARCHAR(100), CLIENT_WEBSITE_ VARCHAR(100), CONTACT_PERSON_ VARCHAR(100), CLIENT_ADDR_ VARCHAR(255))
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_PROJ_CLIENT (PROJ_ID,CLIENT_NAME,CLIENT_NBR,CLIENT_EMAIL,CLIENT_WEBSITE,CONTACT_PERSON,CLIENT_ADDR,CREATED_DATE,IS_DELETED)
VALUES (PROJ_ID_, CLIENT_NAME_,CLIENT_NBR_,CLIENT_EMAIL_,CLIENT_WEBSITE_,CONTACT_PERSON_,CLIENT_ADDR_,CURRENT_TIMESTAMP(),'false');

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PROJECT_CLIENT_STAFF`(CLIENT_ID_ INT(11), STAFF_NAME_ VARCHAR(100), STAFF_NBR_ BIGINT(15), STAFF_EMAIL_ VARCHAR(100), STAFF_ROLE_ VARCHAR(100))
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_PROJ_CLIENT_STAFF (CLIENT_ID,STAFF_NAME,STAFF_NBR,STAFF_EMAIL,STAFF_ROLE,IS_DELETED,CREATED_DATE)
VALUES (CLIENT_ID_,STAFF_NAME_,STAFF_NBR_,STAFF_EMAIL_,STAFF_ROLE_,'false',CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PROJ_BUDGET`(PROJ_ID_ INT(11), SUB_CATG_ID_ INT(11), ITEM_AMT_ INT(50), OTHER_DTL_ VARCHAR(255), IS_DELETED_ VARCHAR(5))
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_PROJ_BUDGET (PROJ_ID,SUB_CATG_ID,ITEM_AMT,OTHER_DTL,IS_DELETED,CREATED_DATE)
VALUES (PROJ_ID_,SUB_CATG_ID_,ITEM_AMT_, OTHER_DTL_,IS_DELETED_,CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PROJ_DISPUTE`(PAP_ID_ INT, CATG_ID_ INT, OTHER_DTL_ VARCHAR(250), DATE_LOG_ DATETIME, DISP_STATUS_ VARCHAR(20), LOG_BY_ INT, CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_PROJ_DISPUTE (PAP_ID,CATG_ID,OTHER_DTL,DATE_LOG,DISP_STATUS,LOG_BY,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_, CATG_ID_, OTHER_DTL_, DATE_LOG_, DISP_STATUS_, LOG_BY_, 'false', CREATED_BY_, CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PROJ_EXPENSE`(PROJ_ID_ INT, EXP_NAME_ VARCHAR(255), SUB_CATG_ID_ INT, EXP_AMT_ INT, EXP_DATE_ DATETIME, OTHER_DTL_ VARCHAR(255))
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_PROJ_EXPENSE(PROJ_ID, EXP_NAME, SUB_CATG_ID,EXP_AMT,EXP_DATE, OTHER_DTL, IS_DELETED,CREATED_DATE)
VALUES (PROJ_ID_, EXP_NAME_, SUB_CATG_ID_,EXP_AMT_,EXP_DATE_, OTHER_DTL_, 'false',CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PROJ_SECT`(SECT_NAME_ VARCHAR(100), SECT_LENGTH_ INT, PROJ_ID_ INT, OTHER_DTL_ VARCHAR(250), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;


INSERT INTO TRN_PROJ_SECTIONS (SECT_NAME,SECT_LENGTH,PROJ_ID,OTHER_DTL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES  (SECT_NAME_,SECT_LENGTH_,PROJ_ID_,OTHER_DTL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());



SELECT ROW_COUNT() INTO ROWS_;


SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_PROJ_STAFF`(USER_ID_ INT, PROJ_ID_ INT, ROLE_ID_ INT, OTHER_DTL_ VARCHAR(255), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_PROJ_STAFF (USER_ID,PROJ_ID,ROLE_ID,OTHER_DTL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (USER_ID_,PROJ_ID_,ROLE_ID_,OTHER_DTL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_SYS_SESSION`(USERID_ INT, DEVICEIP_ VARCHAR(100), DEVICE_ VARCHAR(10), SESSIONID_ VARCHAR(40), OTHERDTL_ LONGTEXT, UPDATEDBY_ INT, ISDELETED_ VARCHAR(5))
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_SYS_SESSION (USER_ID, LOGIN_DATE, DEVICE_IP, DEVICE, SESSION_ID, OTHER_DTL, UPDATED_BY, UPDATED_DATE, IS_DELETED)
VALUES (USERID_, CURRENT_TIMESTAMP(), DEVICEIP_, DEVICE_, SESSIONID_, OTHERDTL_, UPDATEDBY_, CURRENT_TIMESTAMP(), ISDELETED_);

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_CROP`(PAP_ID_ INT, CROP_ID_ INT, UNIT_MSR_ INT, RATE_ INT, OTHER_DTL_ VARCHAR(500), CREATED_BY_ INT, CROP_TYPE_ INT, CROP_DESC_ VARCHAR(200), CROP_UNITS_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE CROP_TOTAL_ INT;

INSERT INTO TRN_VAL_CROP (PAP_ID,CROP_ID,UNIT_MSR,RATE,OTHER_DTL,IS_DELETED,CREATED_BY,CREATED_DATE,CROP_TYPE,CROP_DESC,CROP_UNITS)
VALUES (PAP_ID_,CROP_ID_,UNIT_MSR_,RATE_,OTHER_DTL_,'false',CREATED_BY_,CURRENT_TIMESTAMP(),CROP_TYPE_,CROP_DESC_,CROP_UNITS_);

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT SUM(CROP_UNITS * RATE) INTO CROP_TOTAL_ FROM TRN_VAL_CROP WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

IF PAP_COUNT_ = 0 THEN
INSERT INTO TRN_VAL_TOTALS (PAP_ID,CROP_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,CROP_TOTAL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());
ELSE
UPDATE TRN_VAL_TOTALS SET CROP_VAL = CROP_TOTAL_, UPDATED_BY = CREATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;
END IF;


SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_DISPUTE`(PAP_ID_ INT, CATG_ID_ INT, OTHER_DTL_ VARCHAR(500), LOG_BY_ INT, CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_VAL_DISPUTE (PAP_ID,CATG_ID,OTHER_DTL,DATE_LOG,DISP_STATUS,LOG_BY,IS_DELETED,UPDATED_BY,UPDATED_DATE,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,CATG_ID_,OTHER_DTL_,CURRENT_TIMESTAMP(),'Pending',LOG_BY_,'false',CREATED_BY_,CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_FIX`(PAP_ID_ INT, FIX_TYPE_ INT, FIX_DESC_ VARCHAR(200), FIX_UNITS_ INT, UNIT_MSR_ INT, RATE_ INT, OTHER_DTL_ VARCHAR(500), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE FIX_TOTAL_ INT;

INSERT INTO TRN_VAL_FIX (PAP_ID,FIX_TYPE,FIX_DESC,FIX_UNITS,UNIT_MSR,RATE,OTHER_DTL,IS_DELETED,CREATED_BY,CREATED_DATE) VALUES
(PAP_ID_,FIX_TYPE_,FIX_DESC_,FIX_UNITS_,UNIT_MSR_,RATE_,OTHER_DTL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT SUM(FIX_UNITS * RATE) INTO FIX_TOTAL_ FROM TRN_VAL_FIX WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

IF PAP_COUNT_ = 0 THEN
INSERT INTO TRN_VAL_TOTALS (PAP_ID,FIX_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,FIX_TOTAL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());
ELSE
UPDATE TRN_VAL_TOTALS SET FIX_VAL = FIX_TOTAL_, UPDATED_BY = CREATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;
END IF;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_LAND_`(PAP_ID_ INT, ROW_UNITS_ INT, WL_UNITS_ INT, UNIT_MSR_ INT, SHARE_OF_LND_ INT, DIMINUTION_ INT, RATE_ INT, LND_TYPE_ INT, IS_TITLED_ VARCHAR(10), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE LO_TOTAL_ INT;
DECLARE TEN_TOTAL_ INT;

INSERT INTO TRN_VAL_LAND(PAP_ID,ROW_UNITS,WL_UNITS,UNIT_MSR,SHARE_OF_LND,
DIMINUTION,RATE,LND_TYPE,IS_TITLED,IS_DELETED,CREATED_BY,CREATED_DATE) VALUES
(PAP_ID_,ROW_UNITS_,WL_UNITS_,UNIT_MSR_,SHARE_OF_LND_,
DIMINUTION_,RATE_,LND_TYPE_,IS_TITLED_,'false',CREATED_BY_,CURRENT_TIMESTAMP());

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT ((ROW_UNITS * RATE * (SHARE_OF_LND / 100)) + (WL_UNITS * RATE * (SHARE_OF_LND / 100) * (DIMINUTION / 100))) INTO LO_TOTAL_ 
FROM TRN_VAL_LAND WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT SUM((ROW_UNITS * RATE * ((100 - SHARE_OF_LND) / 100)) + (WL_UNITS * RATE * ((100 - SHARE_OF_LND) / 100) * (DIMINUTION / 100))) INTO TEN_TOTAL_ 
FROM TRN_VAL_LAND WHERE PAP_ID IN (SELECT PAP_ID FROM TRN_BIO_PAP_INFO WHERE PLOT_REF = (SELECT PLOT_REF FROM TRN_BIO_PAP_INFO WHERE PAP_ID = PAP_ID_)) 
AND PAP_STATUS_ID IN (2,3) AND IS_DELETED = 'false';

IF PAP_COUNT_ = 0 THEN
INSERT INTO TRN_VAL_TOTALS (PAP_ID,LAND_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,(LO_TOTAL_ + TEN_TOTAL_),'false',CREATED_BY_,CURRENT_TIMESTAMP());
ELSE
UPDATE TRN_VAL_TOTALS SET LAND_VAL = (LO_TOTAL_ + TEN_TOTAL_), UPDATED_BY = CREATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;
END IF;

SELECT ROW_COUNT() INTO ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_LAND_GIS`(PAP_ID_ INT, GIS_X_ DECIMAL(20,10), GIS_Y_ DECIMAL(20,10), GIS_Z_ DECIMAL(20,10), LATITUDE_ DECIMAL(20,10), LONGITUDE_ DECIMAL(20,10), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_VAL_LAND_GIS (PAP_ID,GIS_X,GIS_Y,GIS_Z,LATITUDE,LONGITUDE,IS_DELETED,CREATED_BY,CREATED_DATE) 
VALUES (PAP_ID_, GIS_X_, GIS_Y_, GIS_Z_, LATITUDE_, LONGITUDE_, 'false', CREATED_BY_, CURRENT_TIMESTAMP()) ;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_LAND_NBR`(PAP_ID_ INT, DIRECTION_ VARCHAR(10), BNDRY_OK_ VARCHAR(10), OTHER_DTL_ VARCHAR(200), CREATED_BY_ INT)
BEGIN


DECLARE ROWS_ INT;

INSERT INTO TRN_VAL_LAND_NBR (PAP_ID, DIRECTION, BNDRY_OK, OTHER_DTL, IS_DELETED, CREATED_BY, CREATED_DATE)
VALUES (PAP_ID_, DIRECTION_, BNDRY_OK_, OTHER_DTL_, 'false', CREATED_BY_, CURRENT_TIMESTAMP());

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_STR`(PAP_ID_ INT, STR_NAME_ VARCHAR(100), STR_TYPE_ INT, STR_UNITS_ INT, UNIT_MSR_ INT, RATE_ INT, STR_VALUE_ INT, STR_ROOF_ VARCHAR(100), STR_WALL_ VARCHAR(100), STR_WINDW_ VARCHAR(100), STR_DOOR_ VARCHAR(100), STR_FLOOR_ VARCHAR(100), OTHER_DTL_ VARCHAR(200), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE STR_TOTAL_ INT;

INSERT INTO TRN_VAL_STR (PAP_ID,STR_NAME,STR_TYPE,STR_UNITS,UNIT_MSR,RATE,STR_VALUE,STR_ROOF,STR_WALL,
STR_WINDW,STR_DOOR,STR_FLOOR,OTHER_DTL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,STR_NAME_,STR_TYPE_,STR_UNITS_,UNIT_MSR_,RATE_,STR_VALUE_,STR_ROOF,STR_WALL_,
STR_WINDW_,STR_DOOR_,STR_FLOOR_,OTHER_DTL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT SUM(STR_UNITS * RATE) INTO STR_TOTAL_ FROM TRN_VAL_STR WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

IF PAP_COUNT_ = 0 THEN
INSERT INTO TRN_VAL_TOTALS (PAP_ID,STR_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,STR_TOTAL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());
ELSE
UPDATE TRN_VAL_TOTALS SET STR_VAL = STR_TOTAL_, UPDATED_BY = CREATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;
END IF;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_INS_VAL_TOTALS`(PAP_ID_ INT, LAND_VAL_ INT, LAND_DA_ INT, CROP_VAL_ INT, CROP_DA_ INT, STR_VAL_ INT, STR_DA_ INT, FIX_VAL_ INT, FIX_DA_ INT, ALLOW_VAL_ INT, CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

INSERT INTO TRN_VAL_TOTALS (PAP_ID,LAND_VAL,LAND_DA,CROP_VAL,CROP_DA,STR_VAL,STR_DA,FIX_VAL,FIX_DA,ALLOW_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,LAND_VAL_,LAND_DA_,CROP_VAL_,CROP_DA_,STR_VAL_,STR_DA_,FIX_VAL_,FIX_DA_,ALLOW_VAL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());


SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_LOCATION_MIGRATOR`()
BEGIN


-- Declare Variables
DECLARE DONE_STATUS_ INTEGER;
DECLARE SUB_COUNTY_ varchar(100);
DECLARE VILLAGE_	VARCHAR(100);

-- declare cursor for employee email
DEClARE LOCATION_CUR CURSOR FOR 
 
/* SELECT MST_COUNTY.COUNTYNAME,MST_SUBCOUNTY.SUBCOUNTYNAME
FROM MST_COUNTY INNER JOIN MST_SUBCOUNTY ON MST_SUBCOUNTY.COUNTYID = MST_COUNTY.COUNTYID */

SELECT MST_SUBCOUNTY.SUBCOUNTYNAME, MST_VILLAGE.VILLAGENAME
FROM MST_SUBCOUNTY INNER JOIN MST_VILLAGE ON MST_VILLAGE.SUBCOUNTYID = MST_SUBCOUNTY.SUBCOUNTYID
WHERE MST_SUBCOUNTY.SUBCOUNTYNAME IN ('BUGAAKI','BUGAMBA','BUGAMBE','BUGANGARI','BUGAYA','BUGAYA','BUGINYANYA','BUGIRI T.C.','BUGOBERO','BUGONDO','BUGONGI',
'BUGOYE','BUGULUMBYA','BUHANIKA','BUHARA','BUHEESI','BUHEHE','BUHIMBA','BUHUNGA','BUHUNGU','BUIKWE','BUKABOLI','BUKAKATA','BUKANGA','BUKATUBE','BUKEDEA',
'BUKHALU','BUKHULO','BUKIBOKOLO','BUKIGAI','BUKIMBIRI','BUKINDA','BUKIRO','BUKOMERO','BUKONDE','BUKOOMA','BUKUKU');

-- declare NOT FOUND handler
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE_STATUS_ = 1;
 
SET DONE_STATUS_ = 0;
 
-- open the cursor
OPEN LOCATION_CUR;

LOCATION_CUR: LOOP

FETCH LOCATION_CUR INTO SUB_COUNTY_, VILLAGE_;

IF DONE_STATUS_ = 1 THEN 

LEAVE LOCATION_CUR;

END IF;

-- do something with the fetched record

/* INSERT INTO MST_BIO_COUNTY (COUNTY, DIST_ID)
VALUES (COUNTY_, (SELECT ID FROM MST_BIO_DISTRICT WHERE DISTRICT = DISTRICT_)); */

/* INSERT INTO MST_BIO_SUBCOUNTY (SUBCOUNTY, CTY_ID)
VALUES (SUB_COUNTY_, (SELECT ID FROM MST_BIO_COUNTY WHERE COUNTY = COUNTY_ LIMIT 1)); */

INSERT INTO MST_BIO_VILLAGE (VILLAGE, SUBCTY_ID)
VALUES (VILLAGE_, (SELECT ID FROM MST_BIO_SUBCOUNTY WHERE SUBCOUNTY = SUB_COUNTY_ LIMIT 1));

END LOOP LOCATION_CUR;

CLOSE LOCATION_CUR;






END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_MST_USER_LOGIN`(_USERNAME VARCHAR(20), _PWD VARCHAR(20))
BEGIN

DECLARE LOGIN_STATUS VARCHAR(10);
DECLARE ROWS_ INT;
DECLARE USER_STATUS VARCHAR(10);
DECLARE ID_ INT;
DECLARE USERNAME_ VARCHAR(15);
DECLARE EMAIL_ VARCHAR(50);
DECLARE DISPLAYNAME_ VARCHAR(100);
DECLARE ROLENAME_ VARCHAR(100);

SELECT MST_SYS_USER.ID,MST_SYS_USER.USER_NAME,MST_SYS_USER.DISP_NAME,MST_SYS_USER.EMAIL,MST_SYS_USER_ROLE.ROLE
INTO ID_,USERNAME_,DISPLAYNAME_,EMAIL_,ROLENAME_
FROM MST_SYS_USER JOIN MST_SYS_USER_ROLE ON MST_SYS_USER.ROLE_ID = MST_SYS_USER_ROLE.ID
WHERE MST_SYS_USER.USER_NAME = _USERNAME AND MST_SYS_USER.PWD = _PWD
AND LOWER(MST_SYS_USER.IS_DELETED) = 'false';

SELECT ROW_COUNT() INTO ROWS_;

IF ROWS_ = 1 THEN
SET LOGIN_STATUS = "TRUE";
ELSE 
SET LOGIN_STATUS = "FALSE";
END IF;

SELECT LOGIN_STATUS, ID_,USERNAME_,DISPLAYNAME_,EMAIL_,ROLENAME_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_OTHER_UNITS`(UNIT_MSR_ INT, PAP_ID_ INT)
BEGIN


-- Declare Variables
DECLARE DONE_STATUS_ INTEGER;
DECLARE _UNIT_MSR varchar(100);
DECLARE _RESULT	VARCHAR(100) DEFAULT NULL;

-- declare cursor for employee email
DEClARE UNIT_MSR_CUR CURSOR FOR 
 
/* SELECT MST_COUNTY.COUNTYNAME,MST_SUBCOUNTY.SUBCOUNTYNAME
FROM MST_COUNTY INNER JOIN MST_SUBCOUNTY ON MST_SUBCOUNTY.COUNTYID = MST_COUNTY.COUNTYID */

SELECT ID FROM MST_VAL_UNIT_MSR WHERE ID NOT IN (UNIT_MSR_);

-- declare NOT FOUND handler
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE_STATUS_ = 1;
 
SET DONE_STATUS_ = 0;
 
-- open the cursor
OPEN UNIT_MSR_CUR;

UNIT_MSR_CUR: LOOP

FETCH UNIT_MSR_CUR INTO _UNIT_MSR;

IF DONE_STATUS_ = 1 THEN 

LEAVE UNIT_MSR_CUR;

END IF;

-- do something with the fetched record

/* INSERT INTO MST_BIO_COUNTY (COUNTY, DIST_ID)
VALUES (COUNTY_, (SELECT ID FROM MST_BIO_DISTRICT WHERE DISTRICT = DISTRICT_)); */

/* INSERT INTO MST_BIO_SUBCOUNTY (SUBCOUNTY, CTY_ID)
VALUES (SUB_COUNTY_, (SELECT ID FROM MST_BIO_COUNTY WHERE COUNTY = COUNTY_ LIMIT 1)); */

SELECT CONCAT(COALESCE(_RESULT,''),', ',(SELECT CONCAT(TRUNCATE(USP_GET_VAL_LAND_CONV(_UNIT_MSR,ROW_UNITS),4),' ',(SELECT UNIT_MSR FROM MST_VAL_UNIT_MSR WHERE ID = _UNIT_MSR)) 
AS OTHER_UNITS FROM TRN_VAL_LAND WHERE PAP_ID = PAP_ID_)) INTO _RESULT;



END LOOP UNIT_MSR_CUR;



CLOSE UNIT_MSR_CUR;


SELECT _RESULT;




END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PAP_ADDR`(ID_ INT, ROAD_ VARCHAR(250), IS_RESIDENT_ VARCHAR(5), VILL_ID_ INT, UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_BIO_PAP_ADDR SET
ROAD = ROAD_,
IS_RESIDENT = IS_RESIDENT_,
VILL_ID = VILL_ID_,
UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;


SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PAP_FAMILY_MBR`(ID_ INT, MBR_NAME_ VARCHAR(100), RLTN_ID_ INT, DOB_ DATE, BIRTH_PLACE_ VARCHAR(20), SEX_ VARCHAR(10), TRIBE_ID_ INT, RELGN_ID_ INT, OTHER_DTL_ VARCHAR(250), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_BIO_PAP_FAMILY SET 
MBR_NAME = MBR_NAME_,
RLTN_ID = RLTN_ID_,
DOB = DOB_,
BIRTH_PLACE = BIRTH_PLACE_,
SEX = SEX_,
TRIBE_ID = TRIBE_ID_,
RELGN_ID = RELGN_ID_,
OTHER_DTL = OTHER_DTL_,
UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PAP_INFO`(HHID_ INT, PAP_NAME_ VARCHAR(200), PLOT_REF_ VARCHAR(20), DESIGN_ VARCHAR(10), PAP_TYPE_ VARCHAR(10), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_BIO_PAP_INFO SET
PAP_NAME = PAP_NAME_,
PLOT_REF = PLOT_REF_,
DESIGN = DESIGN_,
PAP_TYPE = PAP_TYPE_,
UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE HHID = HHID_
AND IS_DELETED = 'false';

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PAP_INFO_BASIC`(IN `HHID_` INT, IN `ID_NO_` INT(25), IN `PAP_NAME_` VARCHAR(100), IN `DOB_` DATE, IN `SEX_` VARCHAR(10), IN `PLOT_REF_` VARCHAR(20), IN `BIRTH_PLACE_` VARCHAR(20), IN `IS_MARRIED_` VARCHAR(5), IN `TRIBE_ID_` INT, IN `RELGN_ID_` INT, IN `OCCUPN_ID_` INT, IN `PAP_STATUS_ID_` INT, IN `PHONE_NO_` INT, IN `OTHR_PHONE_NO_` INT, IN `EMAIL_` VARCHAR(50), IN `INTERVIEWER_` VARCHAR(25), IN `INTERVIEW_DATE_` DATE, IN `UPDATED_BY_` INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_BIO_PAP_INFO SET
PAP_NAME = PAP_NAME_,
DOB = DOB_,
SEX = SEX_,
ID_NO = ID_NO_,
PLOT_REF = PLOT_REF_,
BIRTH_PLACE = BIRTH_PLACE_,
IS_MARRIED = IS_MARRIED_,
TRIBE_ID = TRIBE_ID_,
RELGN_ID = RELGN_ID_,
OCCUPN_ID = OCCUPN_ID_,
PAP_STATUS_ID = PAP_STATUS_ID_,
PHONE_NO = PHONE_NO_,
OTHR_PHONE_NO = OTHR_PHONE_NO_,
EMAIL = EMAIL_,
INTERVIEWER = INTERVIEWER_,
INTERVIEW_DATE = INTERVIEW_DATE_,
UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE HHID = HHID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJECT_CLIENT`(ID_ INT(11), CLIENT_NAME_ VARCHAR(200), CLIENT_NBR_ INT(11), CLIENT_EMAIL_ VARCHAR(50), CLIENT_WEBSITE_ VARCHAR(200), CONTACT_PERSON_ VARCHAR(100), CLIENT_ADDR_ VARCHAR(200))
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_PROJ_CLIENT
SET CLIENT_NAME = CLIENT_NAME_,
CLIENT_NBR = CLIENT_NBR_,
CLIENT_EMAIL = CLIENT_EMAIL_,
CLIENT_WEBSITE = CLIENT_WEBSITE_,
CONTACT_PERSON = CONTACT_PERSON_,
CLIENT_ADDR = CLIENT_ADDR_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJECT_CLIENT_STAFF`(ID_ INT(11), STAFF_NAME_ VARCHAR(200), STAFF_NBR_ INT(11), STAFF_EMAIL_ VARCHAR(100), STAFF_ROLE_ VARCHAR(50))
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_PROJ_CLIENT_STAFF
SET STAFF_NAME = STAFF_NAME_,
STAFF_NBR = STAFF_NBR_,
STAFF_EMAIL = STAFF_EMAIL_,
STAFF_ROLE = STAFF_ROLE_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJECT_DTL`(ID_ INT, PROJ_NAME_ VARCHAR(100), PROJ_CODE_ VARCHAR(10), PROJ_OBJ_ VARCHAR(500),  START_DATE_ DATE, END_DATE_ DATE, PROJ_DESC_ VARCHAR(500))
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_PROJ_DETAILS
SET PROJ_NAME = PROJ_NAME_, 
PROJ_CODE = PROJ_CODE_, 
PROJ_OBJ = PROJ_OBJ_,
PROJ_DESC = PROJ_DESC_,
START_DATE = START_DATE_,
END_DATE = END_DATE_
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJ_BUDGET`(ID_ INT(11), SUB_CATG_ID_ INT(11), ITEM_AMT_ INT(50), OTHER_DTL_ VARCHAR(255))
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_PROJ_BUDGET
SET ID = ID_, SUB_CATG_ID = SUB_CATG_ID_, ITEM_AMT = REPLACE(ITEM_AMT_, ',',''),
OTHER_DTL = OTHER_DTL_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;


SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJ_DISPUTE`(CATG_ID_ INT, OTHER_DTL_ VARCHAR(250), DATE_LOG_ DATETIME, DISP_STATUS_ VARCHAR(20), LOG_BY_ INT, UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_PROJ_DISPUTE SET 
CATG_ID = CATG_ID_,
OTHER_DTL = OTHER_DTL_,
DATE_LOG = DATE_LOG_,
DISP_STATUS = DISP_STATUS_,
LOG_BY = LOG_BY_,
UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJ_EXPENSE`(ID_ INT, EXP_NAME_ VARCHAR(255), SUB_CATG_ID_ INT, EXP_AMT_ INT, EXP_DATE_ DATETIME, OTHER_DTL_ VARCHAR(255))
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_PROJ_EXPENSE SET
EXP_NAME = EXP_NAME_,
SUB_CATG_ID = SUB_CATG_ID_,
EXP_AMT = EXP_AMT_,
EXP_DATE = EXP_DATE_,
UPDATED_DATE = CURRENT_TIMESTAMP(),
OTHER_DTL = OTHER_DTL_
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJ_SECT`(ID_ INT, SECT_NAME_ VARCHAR(100), SECT_LENGTH_ INT, OTHER_DTL_ VARCHAR(250), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;


UPDATE TRN_PROJ_SECTIONS SET 
SECT_NAME = SECT_NAME_,
SECT_LENGTH = SECT_LENGTH_,
OTHER_DTL = OTHER_DTL_,
UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;



SELECT ROW_COUNT() INTO ROWS_;


SELECT ROWS_;





END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_PROJ_STAFF`(ID_ INT, USER_ID_ INT, ROLE_ID_ INT, OTHER_DTL_ VARCHAR(255), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_PROJ_STAFF SET
USER_ID = USER_ID_,
ROLE_ID = ROLE_ID_,
OTHER_DTL = OTHER_DTL_,
UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_CROP`(ID_ INT, CROP_ID_ INT, CROP_TYPE_ INT, CROP_DESC_ VARCHAR(500), UNIT_MSR_ INT, CROP_UNITS_ INT, RATE_ INT, OTHER_DTL_ VARCHAR(100), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE CROP_TOTAL_ INT;

UPDATE TRN_VAL_CROP SET 
PAP_ID = PAP_ID_, CROP_ID = CROP_ID_, UNIT_MSR = UNIT_MSR_, RATE = RATE_, OTHER_DTL = OTHER_DTL_,
UPDATED_BY = UPDATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP(), CROP_TYPE = CROP_TYPE_, CROP_DESC = CROP_DESC_,
CROP_UNITS = CROP_UNITS_ WHERE ID = ID_;

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT SUM(CROP_UNITS * RATE) INTO CROP_TOTAL_ FROM TRN_VAL_CROP WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

IF PAP_COUNT_ = 0 THEN
INSERT INTO TRN_VAL_TOTALS (PAP_ID,CROP_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,CROP_TOTAL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());
ELSE
UPDATE TRN_VAL_TOTALS SET CROP_VAL = CROP_TOTAL_, UPDATED_BY = CREATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;
END IF;


SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_DISPUTE`(ID_ INT, CATG_ID_ INT, OTHER_DTL_ VARCHAR(500), DISP_STATUS VARCHAR(20), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_VAL_DISPUTE SET CATG_ID = CATG_ID_, OTHER_DTL = OTHER_DTL_, DISP_STATUS = DISP_STATUS_, UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP() WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_FIX`(ID_ INT, FIX_TYPE_ INT, FIX_DESC_ VARCHAR(200), FIX_UNITS_ INT, UNIT_MSR_ INT, RATE_ INT, OTHER_DTL_ VARCHAR(500), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE FIX_TOTAL_ INT;

UPDATE TRN_VAL_FIX SET 
PAP_ID = PAP_ID_, FIX_TYPE = FIX_TYPE_, FIX_DESC = FIX_DESC_ , FIX_UNITS = FIX_UNITS_, UNIT_MSR = UNIT_MSR_,
RATE = RATE_, OTHER_DTL = OTHER_DTL_, UPDATED_BY = UPDATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT SUM(FIX_UNITS * RATE) INTO FIX_TOTAL_ FROM TRN_VAL_FIX WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

IF PAP_COUNT_ = 0 THEN
INSERT INTO TRN_VAL_TOTALS (PAP_ID,FIX_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,FIX_TOTAL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());
ELSE
UPDATE TRN_VAL_TOTALS SET FIX_VAL = FIX_TOTAL_, UPDATED_BY = CREATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;
END IF;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_LAND`(PAP_ID_ INT, ROW_UNITS_ DECIMAL(20,11), WL_UNITS_ DECIMAL(20,11), UNIT_MSR_ INT, BLOCK_ INT, PLOT_ INT, SHARE_OF_LND_ INT, DIMINUTION_ INT, RATE_ INT, LND_TYPE_ INT, IS_TITLED_ VARCHAR(10), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE CHECK_ INT;
DECLARE LO_TOTAL_ INT;
DECLARE TEN_TOTAL_ INT;

SELECT COUNT(PAP_ID) INTO CHECK_ FROM TRN_VAL_LAND WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT ((USP_GET_VAL_LAND_ACRES(UNIT_MSR_,ROW_UNITS_) * RATE_ * (SHARE_OF_LND_ / 100)) + 
(USP_GET_VAL_LAND_ACRES(UNIT_MSR_,WL_UNITS_) * RATE_ * (SHARE_OF_LND_ / 100) * (DIMINUTION_ / 100))) INTO LO_TOTAL_;

/* SELECT SUM((ROW_UNITS * RATE * ((100 - SHARE_OF_LND) / 100)) + (WL_UNITS * RATE * ((100 - SHARE_OF_LND) / 100) * (DIMINUTION / 100))) INTO TEN_TOTAL_ 
FROM TRN_VAL_LAND WHERE PAP_ID IN (SELECT PAP_ID FROM TRN_BIO_PAP_INFO WHERE PLOT_REF = (SELECT PLOT_REF FROM TRN_BIO_PAP_INFO WHERE PAP_ID = PAP_ID_)) 
AND PAP_STATUS_ID IN (2,3) AND IS_DELETED = 'false'; */

IF CHECK_ = 0 THEN

INSERT INTO TRN_VAL_LAND(PAP_ID,ROW_UNITS,WL_UNITS,UNIT_MSR,SHARE_OF_LND,
DIMINUTION,RATE,LND_TYPE,BLOCK,PLOT,IS_TITLED,IS_DELETED,CREATED_BY,CREATED_DATE) 
VALUES (PAP_ID_,ROW_UNITS_,WL_UNITS_,UNIT_MSR_,SHARE_OF_LND_,
DIMINUTION_,RATE_,LND_TYPE_,BLOCK_,PLOT_,IS_TITLED_,'false',UPDATED_BY_,CURRENT_TIMESTAMP());

ELSE

UPDATE TRN_VAL_LAND SET 
ROW_UNITS = ROW_UNITS_, WL_UNITS = WL_UNITS_, UNIT_MSR = UNIT_MSR_, SHARE_OF_LND = SHARE_OF_LND_,
DIMINUTION = DIMINUTION_, RATE = RATE_, LND_TYPE = LND_TYPE_, BLOCK = BLOCK_, PLOT = PLOT_, 
IS_TITLED = IS_TITLED_, UPDATED_BY = UPDATED_BY_,UPDATED_DATE = CURRENT_TIMESTAMP() 
WHERE PAP_ID = PAP_ID_;

END IF;

IF PAP_COUNT_ = 0 THEN

INSERT INTO TRN_VAL_TOTALS (PAP_ID,LAND_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,LO_TOTAL_,'false',UPDATED_BY_,CURRENT_TIMESTAMP());

ELSE

UPDATE TRN_VAL_TOTALS SET 
LAND_VAL = LO_TOTAL_, UPDATED_BY = UPDATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE PAP_ID = PAP_ID_;

END IF;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_LAND_GIS`(ID_ INT, GIS_X_ DECIMAL(20,10), GIS_Y_ DECIMAL(20,10), GIS_Z_ DECIMAL(20,10), LATITUDE_ DECIMAL(20,10), LONGITUDE_ DECIMAL(20,10), CREATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_VAL_LAND_GIS SET GIS_X = GIS_X_, GIS_Y = GIS_Y_, GIS_Z = GIS_Z_,
LATITUDE = LATITUDE_, LONGITUDE = LONGITUDE_, UPDATED_BY = UPDATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_LAND_NBR`(ID_ INT, DIRECTION_ VARCHAR(10), BNDRY_OK_ VARCHAR(10), OTHER_DTL_ VARCHAR(200), UPDATED_BY_ INT)
BEGIN


DECLARE ROWS_ INT;

UPDATE TRN_VAL_LAND_NBR SET PAP_ID = PAP_ID_, DIRECTION = DIRECTION_, BNDRY_OK = BNDRY_OK_, 
OTHER_DTL = OTHER_DTL_, UPDATED_BY = UPDATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_STR`(ID_ INT, PAP_ID_ INT, STR_NAME_ VARCHAR(100), STR_TYPE_ INT, STR_UNITS_ INT, UNIT_MSR_ INT, RATE_ INT, STR_VALUE_ INT, STR_ROOF_ VARCHAR(100), STR_WALL_ VARCHAR(100), STR_WINDW_ VARCHAR(100), STR_DOOR_ VARCHAR(100), STR_FLOOR_ VARCHAR(100), OTHER_DTL_ VARCHAR(200), UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;
DECLARE PAP_COUNT_ INT;
DECLARE STR_TOTAL_ INT;

UPDATE TRN_VAL_STR SET 
PAP_ID = PAP_ID_, STR_NAME = STR_NAME_, STR_TYPE = STR_TYPE_, STR_UNITS = STR_UNITS_, UNIT_MSR = UNIT_MSR_,
RATE = RATE_, STR_VALUE = STR_VALUE_, STR_ROOF = STR_ROOF_, STR_WALL = STR_WALL_, STR_WINDW = STR_WINDW_,
STR_DOOR = STR_DOOR_, STR_FLOOR = STR_FLOOR_, OTHER_DTL = OTHER_DTL_, UPDATED_BY = UPDATED_BY_,
UPDATED_DATE = CURRENT_TIMESTAMP() WHERE ID = ID_ AND PAP_ID = PAP_ID_;

SELECT COUNT(PAP_ID) INTO PAP_COUNT_ FROM TRN_VAL_TOTALS WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

SELECT SUM(STR_UNITS * RATE) INTO STR_TOTAL_ FROM TRN_VAL_STR WHERE PAP_ID = PAP_ID_ AND IS_DELETED = 'false';

IF PAP_COUNT_ = 0 THEN
INSERT INTO TRN_VAL_TOTALS (PAP_ID,STR_VAL,IS_DELETED,CREATED_BY,CREATED_DATE)
VALUES (PAP_ID_,STR_TOTAL_,'false',CREATED_BY_,CURRENT_TIMESTAMP());
ELSE
UPDATE TRN_VAL_TOTALS SET STR_VAL = STR_TOTAL_, UPDATED_BY = CREATED_BY_, 
UPDATED_DATE = CURRENT_TIMESTAMP() WHERE ID = ID_;
END IF;

SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`application`@`%` PROCEDURE `USP_UPD_VAL_TOTALS`(ID_ INT, LAND_VAL_ INT, LAND_DA_ INT, CROP_VAL_ INT, CROP_DA_ INT, STR_VAL_ INT, STR_DA_ INT, FIX_VAL_ INT, FIX_DA_ INT, ALLOW_VAL_ INT, UPDATED_BY_ INT)
BEGIN

DECLARE ROWS_ INT;

UPDATE TRN_VAL_TOTALS SET 
LAND_VAL = LAND_VAL_, LAND_DA = LAND_DA_, CROP_VAL = CROP_VAL_, CROP_DA = CROP_DA_,
STR_VAL = STR_VAL_, STR_DA = STR_DA_, FIX_VAL = FIX_VAL_, FIX_DA = FIX_DA_,
ALLOW_VAL = ALLOW_VAL_, UPDATED_BY = UPDATED_BY_, UPDATED_DATE = CURRENT_TIMESTAMP()
WHERE ID = ID_;


SELECT ROW_COUNT() INTO ROWS_;

SELECT ROWS_;


END$$
DELIMITER ;
